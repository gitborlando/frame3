!(function (e, t) {
	'object' == typeof exports && 'object' == typeof module
		? (module.exports = t())
		: 'function' == typeof define && define.amd
		? define([], t)
		: 'object' == typeof exports
		? (exports.simple = t())
		: (e.simple = t())
})(self, () =>
	(() => {
		var e = {
				86: (e, t, n) => {
					var r = n(305),
						o = Object.prototype.hasOwnProperty,
						i = 'undefined' != typeof Map
					function a() {
						;(this._array = []), (this._set = i ? new Map() : Object.create(null))
					}
					;(a.fromArray = function (e, t) {
						for (var n = new a(), r = 0, o = e.length; r < o; r++) n.add(e[r], t)
						return n
					}),
						(a.prototype.size = function () {
							return i ? this._set.size : Object.getOwnPropertyNames(this._set).length
						}),
						(a.prototype.add = function (e, t) {
							var n = i ? e : r.toSetString(e),
								a = i ? this.has(e) : o.call(this._set, n),
								s = this._array.length
							;(a && !t) || this._array.push(e),
								a || (i ? this._set.set(e, s) : (this._set[n] = s))
						}),
						(a.prototype.has = function (e) {
							if (i) return this._set.has(e)
							var t = r.toSetString(e)
							return o.call(this._set, t)
						}),
						(a.prototype.indexOf = function (e) {
							if (i) {
								var t = this._set.get(e)
								if (t >= 0) return t
							} else {
								var n = r.toSetString(e)
								if (o.call(this._set, n)) return this._set[n]
							}
							throw new Error('"' + e + '" is not in the set.')
						}),
						(a.prototype.at = function (e) {
							if (e >= 0 && e < this._array.length) return this._array[e]
							throw new Error('No element indexed by ' + e)
						}),
						(a.prototype.toArray = function () {
							return this._array.slice()
						}),
						(t.I = a)
				},
				520: (e, t, n) => {
					var r = n(167)
					;(t.encode = function (e) {
						var t,
							n = '',
							o = (function (e) {
								return e < 0 ? 1 + (-e << 1) : 0 + (e << 1)
							})(e)
						do {
							;(t = 31 & o), (o >>>= 5) > 0 && (t |= 32), (n += r.encode(t))
						} while (o > 0)
						return n
					}),
						(t.decode = function (e, t, n) {
							var o,
								i,
								a,
								s,
								l = e.length,
								c = 0,
								u = 0
							do {
								if (t >= l)
									throw new Error('Expected more digits in base 64 VLQ value.')
								if (-1 === (i = r.decode(e.charCodeAt(t++))))
									throw new Error('Invalid base64 digit: ' + e.charAt(t - 1))
								;(o = !!(32 & i)), (c += (i &= 31) << u), (u += 5)
							} while (o)
							;(n.value = ((s = (a = c) >> 1), 1 == (1 & a) ? -s : s)), (n.rest = t)
						})
				},
				167: (e, t) => {
					var n =
						'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split(
							''
						)
					;(t.encode = function (e) {
						if (0 <= e && e < n.length) return n[e]
						throw new TypeError('Must be between 0 and 63: ' + e)
					}),
						(t.decode = function (e) {
							return 65 <= e && e <= 90
								? e - 65
								: 97 <= e && e <= 122
								? e - 97 + 26
								: 48 <= e && e <= 57
								? e - 48 + 52
								: 43 == e
								? 62
								: 47 == e
								? 63
								: -1
						})
				},
				688: (e, t, n) => {
					var r = n(305)
					function o() {
						;(this._array = []),
							(this._sorted = !0),
							(this._last = { generatedLine: -1, generatedColumn: 0 })
					}
					;(o.prototype.unsortedForEach = function (e, t) {
						this._array.forEach(e, t)
					}),
						(o.prototype.add = function (e) {
							var t, n, o, i, a, s
							;(n = e),
								(o = (t = this._last).generatedLine),
								(i = n.generatedLine),
								(a = t.generatedColumn),
								(s = n.generatedColumn),
								i > o ||
								(i == o && s >= a) ||
								r.compareByGeneratedPositionsInflated(t, n) <= 0
									? ((this._last = e), this._array.push(e))
									: ((this._sorted = !1), this._array.push(e))
						}),
						(o.prototype.toArray = function () {
							return (
								this._sorted ||
									(this._array.sort(r.compareByGeneratedPositionsInflated),
									(this._sorted = !0)),
								this._array
							)
						}),
						(t.H = o)
				},
				508: (e, t, n) => {
					var r = n(520),
						o = n(305),
						i = n(86).I,
						a = n(688).H
					function s(e) {
						e || (e = {}),
							(this._file = o.getArg(e, 'file', null)),
							(this._sourceRoot = o.getArg(e, 'sourceRoot', null)),
							(this._skipValidation = o.getArg(e, 'skipValidation', !1)),
							(this._sources = new i()),
							(this._names = new i()),
							(this._mappings = new a()),
							(this._sourcesContents = null)
					}
					;(s.prototype._version = 3),
						(s.fromSourceMap = function (e) {
							var t = e.sourceRoot,
								n = new s({ file: e.file, sourceRoot: t })
							return (
								e.eachMapping(function (e) {
									var r = {
										generated: { line: e.generatedLine, column: e.generatedColumn },
									}
									null != e.source &&
										((r.source = e.source),
										null != t && (r.source = o.relative(t, r.source)),
										(r.original = { line: e.originalLine, column: e.originalColumn }),
										null != e.name && (r.name = e.name)),
										n.addMapping(r)
								}),
								e.sources.forEach(function (r) {
									var i = r
									null !== t && (i = o.relative(t, r)),
										n._sources.has(i) || n._sources.add(i)
									var a = e.sourceContentFor(r)
									null != a && n.setSourceContent(r, a)
								}),
								n
							)
						}),
						(s.prototype.addMapping = function (e) {
							var t = o.getArg(e, 'generated'),
								n = o.getArg(e, 'original', null),
								r = o.getArg(e, 'source', null),
								i = o.getArg(e, 'name', null)
							this._skipValidation || this._validateMapping(t, n, r, i),
								null != r &&
									((r = String(r)), this._sources.has(r) || this._sources.add(r)),
								null != i &&
									((i = String(i)), this._names.has(i) || this._names.add(i)),
								this._mappings.add({
									generatedLine: t.line,
									generatedColumn: t.column,
									originalLine: null != n && n.line,
									originalColumn: null != n && n.column,
									source: r,
									name: i,
								})
						}),
						(s.prototype.setSourceContent = function (e, t) {
							var n = e
							null != this._sourceRoot && (n = o.relative(this._sourceRoot, n)),
								null != t
									? (this._sourcesContents ||
											(this._sourcesContents = Object.create(null)),
									  (this._sourcesContents[o.toSetString(n)] = t))
									: this._sourcesContents &&
									  (delete this._sourcesContents[o.toSetString(n)],
									  0 === Object.keys(this._sourcesContents).length &&
											(this._sourcesContents = null))
						}),
						(s.prototype.applySourceMap = function (e, t, n) {
							var r = t
							if (null == t) {
								if (null == e.file)
									throw new Error(
										'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.'
									)
								r = e.file
							}
							var a = this._sourceRoot
							null != a && (r = o.relative(a, r))
							var s = new i(),
								l = new i()
							this._mappings.unsortedForEach(function (t) {
								if (t.source === r && null != t.originalLine) {
									var i = e.originalPositionFor({
										line: t.originalLine,
										column: t.originalColumn,
									})
									null != i.source &&
										((t.source = i.source),
										null != n && (t.source = o.join(n, t.source)),
										null != a && (t.source = o.relative(a, t.source)),
										(t.originalLine = i.line),
										(t.originalColumn = i.column),
										null != i.name && (t.name = i.name))
								}
								var c = t.source
								null == c || s.has(c) || s.add(c)
								var u = t.name
								null == u || l.has(u) || l.add(u)
							}, this),
								(this._sources = s),
								(this._names = l),
								e.sources.forEach(function (t) {
									var r = e.sourceContentFor(t)
									null != r &&
										(null != n && (t = o.join(n, t)),
										null != a && (t = o.relative(a, t)),
										this.setSourceContent(t, r))
								}, this)
						}),
						(s.prototype._validateMapping = function (e, t, n, r) {
							if (t && 'number' != typeof t.line && 'number' != typeof t.column)
								throw new Error(
									'original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.'
								)
							if (
								(!(e && 'line' in e && 'column' in e && e.line > 0 && e.column >= 0) ||
									t ||
									n ||
									r) &&
								!(
									e &&
									'line' in e &&
									'column' in e &&
									t &&
									'line' in t &&
									'column' in t &&
									e.line > 0 &&
									e.column >= 0 &&
									t.line > 0 &&
									t.column >= 0 &&
									n
								)
							)
								throw new Error(
									'Invalid mapping: ' +
										JSON.stringify({ generated: e, source: n, original: t, name: r })
								)
						}),
						(s.prototype._serializeMappings = function () {
							for (
								var e,
									t,
									n,
									i,
									a = 0,
									s = 1,
									l = 0,
									c = 0,
									u = 0,
									h = 0,
									p = '',
									d = this._mappings.toArray(),
									m = 0,
									g = d.length;
								m < g;
								m++
							) {
								if (((e = ''), (t = d[m]).generatedLine !== s))
									for (a = 0; t.generatedLine !== s; ) (e += ';'), s++
								else if (m > 0) {
									if (!o.compareByGeneratedPositionsInflated(t, d[m - 1])) continue
									e += ','
								}
								;(e += r.encode(t.generatedColumn - a)),
									(a = t.generatedColumn),
									null != t.source &&
										((i = this._sources.indexOf(t.source)),
										(e += r.encode(i - h)),
										(h = i),
										(e += r.encode(t.originalLine - 1 - c)),
										(c = t.originalLine - 1),
										(e += r.encode(t.originalColumn - l)),
										(l = t.originalColumn),
										null != t.name &&
											((n = this._names.indexOf(t.name)),
											(e += r.encode(n - u)),
											(u = n))),
									(p += e)
							}
							return p
						}),
						(s.prototype._generateSourcesContent = function (e, t) {
							return e.map(function (e) {
								if (!this._sourcesContents) return null
								null != t && (e = o.relative(t, e))
								var n = o.toSetString(e)
								return Object.prototype.hasOwnProperty.call(this._sourcesContents, n)
									? this._sourcesContents[n]
									: null
							}, this)
						}),
						(s.prototype.toJSON = function () {
							var e = {
								version: this._version,
								sources: this._sources.toArray(),
								names: this._names.toArray(),
								mappings: this._serializeMappings(),
							}
							return (
								null != this._file && (e.file = this._file),
								null != this._sourceRoot && (e.sourceRoot = this._sourceRoot),
								this._sourcesContents &&
									(e.sourcesContent = this._generateSourcesContent(
										e.sources,
										e.sourceRoot
									)),
								e
							)
						}),
						(s.prototype.toString = function () {
							return JSON.stringify(this.toJSON())
						}),
						(t.h = s)
				},
				305: (e, t) => {
					t.getArg = function (e, t, n) {
						if (t in e) return e[t]
						if (3 === arguments.length) return n
						throw new Error('"' + t + '" is a required argument.')
					}
					var n = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,
						r = /^data:.+\,.+$/
					function o(e) {
						var t = e.match(n)
						return t
							? { scheme: t[1], auth: t[2], host: t[3], port: t[4], path: t[5] }
							: null
					}
					function i(e) {
						var t = ''
						return (
							e.scheme && (t += e.scheme + ':'),
							(t += '//'),
							e.auth && (t += e.auth + '@'),
							e.host && (t += e.host),
							e.port && (t += ':' + e.port),
							e.path && (t += e.path),
							t
						)
					}
					;(t.urlParse = o), (t.urlGenerate = i)
					var a,
						s,
						l =
							((a = function (e) {
								var n = e,
									r = o(e)
								if (r) {
									if (!r.path) return e
									n = r.path
								}
								for (var a = t.isAbsolute(n), s = [], l = 0, c = 0; ; ) {
									if (((l = c), -1 === (c = n.indexOf('/', l)))) {
										s.push(n.slice(l))
										break
									}
									for (s.push(n.slice(l, c)); c < n.length && '/' === n[c]; ) c++
								}
								var u,
									h = 0
								for (c = s.length - 1; c >= 0; c--)
									'.' === (u = s[c])
										? s.splice(c, 1)
										: '..' === u
										? h++
										: h > 0 &&
										  ('' === u ? (s.splice(c + 1, h), (h = 0)) : (s.splice(c, 2), h--))
								return (
									'' === (n = s.join('/')) && (n = a ? '/' : '.'),
									r ? ((r.path = n), i(r)) : n
								)
							}),
							(s = []),
							function (e) {
								for (var t = 0; t < s.length; t++)
									if (s[t].input === e) {
										var n = s[0]
										return (s[0] = s[t]), (s[t] = n), s[0].result
									}
								var r = a(e)
								return s.unshift({ input: e, result: r }), s.length > 32 && s.pop(), r
							})
					function c(e, t) {
						'' === e && (e = '.'), '' === t && (t = '.')
						var n = o(t),
							a = o(e)
						if ((a && (e = a.path || '/'), n && !n.scheme))
							return a && (n.scheme = a.scheme), i(n)
						if (n || t.match(r)) return t
						if (a && !a.host && !a.path) return (a.host = t), i(a)
						var s = '/' === t.charAt(0) ? t : l(e.replace(/\/+$/, '') + '/' + t)
						return a ? ((a.path = s), i(a)) : s
					}
					;(t.normalize = l),
						(t.join = c),
						(t.isAbsolute = function (e) {
							return '/' === e.charAt(0) || n.test(e)
						}),
						(t.relative = function (e, t) {
							'' === e && (e = '.'), (e = e.replace(/\/$/, ''))
							for (var n = 0; 0 !== t.indexOf(e + '/'); ) {
								var r = e.lastIndexOf('/')
								if (r < 0) return t
								if ((e = e.slice(0, r)).match(/^([^\/]+:\/)?\/*$/)) return t
								++n
							}
							return Array(n + 1).join('../') + t.substr(e.length + 1)
						})
					var u = !('__proto__' in Object.create(null))
					function h(e) {
						return e
					}
					function p(e) {
						if (!e) return !1
						var t = e.length
						if (t < 9) return !1
						if (
							95 !== e.charCodeAt(t - 1) ||
							95 !== e.charCodeAt(t - 2) ||
							111 !== e.charCodeAt(t - 3) ||
							116 !== e.charCodeAt(t - 4) ||
							111 !== e.charCodeAt(t - 5) ||
							114 !== e.charCodeAt(t - 6) ||
							112 !== e.charCodeAt(t - 7) ||
							95 !== e.charCodeAt(t - 8) ||
							95 !== e.charCodeAt(t - 9)
						)
							return !1
						for (var n = t - 10; n >= 0; n--) if (36 !== e.charCodeAt(n)) return !1
						return !0
					}
					function d(e, t) {
						return e === t ? 0 : null === e ? 1 : null === t ? -1 : e > t ? 1 : -1
					}
					;(t.toSetString = u
						? h
						: function (e) {
								return p(e) ? '$' + e : e
						  }),
						(t.fromSetString = u
							? h
							: function (e) {
									return p(e) ? e.slice(1) : e
							  }),
						(t.compareByOriginalPositions = function (e, t, n) {
							var r = d(e.source, t.source)
							return 0 !== r ||
								0 != (r = e.originalLine - t.originalLine) ||
								0 != (r = e.originalColumn - t.originalColumn) ||
								n ||
								0 != (r = e.generatedColumn - t.generatedColumn) ||
								0 != (r = e.generatedLine - t.generatedLine)
								? r
								: d(e.name, t.name)
						}),
						(t.compareByOriginalPositionsNoSource = function (e, t, n) {
							var r
							return 0 != (r = e.originalLine - t.originalLine) ||
								0 != (r = e.originalColumn - t.originalColumn) ||
								n ||
								0 != (r = e.generatedColumn - t.generatedColumn) ||
								0 != (r = e.generatedLine - t.generatedLine)
								? r
								: d(e.name, t.name)
						}),
						(t.compareByGeneratedPositionsDeflated = function (e, t, n) {
							var r = e.generatedLine - t.generatedLine
							return 0 !== r ||
								0 != (r = e.generatedColumn - t.generatedColumn) ||
								n ||
								0 !== (r = d(e.source, t.source)) ||
								0 != (r = e.originalLine - t.originalLine) ||
								0 != (r = e.originalColumn - t.originalColumn)
								? r
								: d(e.name, t.name)
						}),
						(t.compareByGeneratedPositionsDeflatedNoLine = function (e, t, n) {
							var r = e.generatedColumn - t.generatedColumn
							return 0 !== r ||
								n ||
								0 !== (r = d(e.source, t.source)) ||
								0 != (r = e.originalLine - t.originalLine) ||
								0 != (r = e.originalColumn - t.originalColumn)
								? r
								: d(e.name, t.name)
						}),
						(t.compareByGeneratedPositionsInflated = function (e, t) {
							var n = e.generatedLine - t.generatedLine
							return 0 !== n ||
								0 != (n = e.generatedColumn - t.generatedColumn) ||
								0 !== (n = d(e.source, t.source)) ||
								0 != (n = e.originalLine - t.originalLine) ||
								0 != (n = e.originalColumn - t.originalColumn)
								? n
								: d(e.name, t.name)
						}),
						(t.parseSourceMapInput = function (e) {
							return JSON.parse(e.replace(/^\)]}'[^\n]*\n/, ''))
						}),
						(t.computeSourceURL = function (e, t, n) {
							if (
								((t = t || ''),
								e &&
									('/' !== e[e.length - 1] && '/' !== t[0] && (e += '/'), (t = e + t)),
								n)
							) {
								var r = o(n)
								if (!r) throw new Error('sourceMapURL could not be parsed')
								if (r.path) {
									var a = r.path.lastIndexOf('/')
									a >= 0 && (r.path = r.path.substring(0, a + 1))
								}
								t = c(i(r), t)
							}
							return l(t)
						})
				},
			},
			t = {}
		function n(r) {
			var o = t[r]
			if (void 0 !== o) return o.exports
			var i = (t[r] = { exports: {} })
			return e[r](i, i.exports, n), i.exports
		}
		;(n.d = (e, t) => {
			for (var r in t)
				n.o(t, r) &&
					!n.o(e, r) &&
					Object.defineProperty(e, r, { enumerable: !0, get: t[r] })
		}),
			(n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
			(n.r = (e) => {
				'undefined' != typeof Symbol &&
					Symbol.toStringTag &&
					Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
					Object.defineProperty(e, '__esModule', { value: !0 })
			})
		var r = {}
		return (
			(() => {
				'use strict'
				n.r(r), n.d(r, { css: () => Nc, parseCss: () => _c })
				var e = {}
				n.r(e), n.d(e, { safe: () => Mt, spec: () => It })
				var t = {}
				n.r(t),
					n.d(t, {
						angle: () => Nn,
						decibel: () => Fn,
						flex: () => qn,
						frequency: () => Bn,
						length: () => Mn,
						resolution: () => Rn,
						semitones: () => Un,
						time: () => _n,
					})
				var o = {}
				n.r(o),
					n.d(o, {
						getTrace: () => no,
						isKeyword: () => io,
						isProperty: () => oo,
						isType: () => ro,
					})
				var i = {}
				n.r(i),
					n.d(i, {
						generate: () => _o,
						name: () => Io,
						parse: () => No,
						structure: () => Mo,
					})
				var a = {}
				n.r(a),
					n.d(a, {
						generate: () => Vo,
						name: () => qo,
						parse: () => Wo,
						structure: () => Uo,
						walkContext: () => Fo,
					})
				var s = {}
				n.r(s),
					n.d(s, {
						generate: () => $o,
						name: () => Ho,
						parse: () => Ko,
						structure: () => Qo,
						walkContext: () => Go,
					})
				var l = {}
				n.r(l),
					n.d(l, {
						generate: () => si,
						name: () => oi,
						parse: () => ai,
						structure: () => ii,
					})
				var c = {}
				n.r(c),
					n.d(c, {
						generate: () => bi,
						name: () => di,
						parse: () => fi,
						structure: () => gi,
						walkContext: () => mi,
					})
				var u = {}
				n.r(u),
					n.d(u, {
						generate: () => xi,
						name: () => yi,
						parse: () => vi,
						structure: () => ki,
					})
				var h = {}
				n.r(h),
					n.d(h, {
						generate: () => zi,
						name: () => wi,
						parse: () => Ci,
						structure: () => Si,
					})
				var p = {}
				n.r(p),
					n.d(p, {
						generate: () => Oi,
						name: () => Ai,
						parse: () => Ti,
						structure: () => Li,
					})
				var d = {}
				n.r(d),
					n.d(d, {
						generate: () => Ii,
						name: () => Ei,
						parse: () => Di,
						structure: () => ji,
					})
				var m = {}
				n.r(m),
					n.d(m, {
						generate: () => Ui,
						name: () => Ri,
						parse: () => Fi,
						structure: () => qi,
					})
				var g = {}
				n.r(g),
					n.d(g, {
						generate: () => Ki,
						name: () => Hi,
						parse: () => Qi,
						structure: () => Gi,
					})
				var f = {}
				n.r(f),
					n.d(f, {
						generate: () => ca,
						name: () => ia,
						parse: () => la,
						structure: () => sa,
						walkContext: () => aa,
					})
				var b = {}
				n.r(b),
					n.d(b, {
						generate: () => ba,
						name: () => ma,
						parse: () => fa,
						structure: () => ga,
					})
				var y = {}
				n.r(y),
					n.d(y, {
						generate: () => xa,
						name: () => ya,
						parse: () => va,
						structure: () => ka,
					})
				var k = {}
				n.r(k),
					n.d(k, {
						generate: () => Aa,
						name: () => wa,
						parse: () => za,
						structure: () => Ca,
						walkContext: () => Sa,
					})
				var v = {}
				n.r(v),
					n.d(v, {
						generate: () => Ea,
						name: () => Ta,
						parse: () => Pa,
						structure: () => Oa,
						xxx: () => La,
					})
				var x = {}
				n.r(x),
					n.d(x, {
						generate: () => Ma,
						name: () => ja,
						parse: () => Ia,
						structure: () => Da,
					})
				var w = {}
				n.r(w),
					n.d(w, {
						generate: () => Ra,
						name: () => Na,
						parse: () => Ba,
						structure: () => _a,
					})
				var S = {}
				n.r(S),
					n.d(S, {
						generate: () => Wa,
						name: () => qa,
						parse: () => Ua,
						structure: () => Fa,
					})
				var C = {}
				n.r(C),
					n.d(C, {
						generate: () => Qa,
						name: () => Va,
						parse: () => Ga,
						structure: () => Ha,
					})
				var z = {}
				n.r(z),
					n.d(z, {
						generate: () => Ya,
						name: () => Ka,
						parse: () => Xa,
						structure: () => $a,
					})
				var A = {}
				n.r(A),
					n.d(A, {
						generate: () => ns,
						name: () => Ja,
						parse: () => ts,
						structure: () => es,
					})
				var L = {}
				n.r(L),
					n.d(L, {
						generate: () => as,
						name: () => rs,
						parse: () => is,
						structure: () => os,
					})
				var T = {}
				n.r(T),
					n.d(T, {
						generate: () => us,
						name: () => ss,
						parse: () => cs,
						structure: () => ls,
					})
				var O = {}
				n.r(O),
					n.d(O, {
						generate: () => ms,
						name: () => hs,
						parse: () => ds,
						structure: () => ps,
					})
				var P = {}
				n.r(P),
					n.d(P, {
						generate: () => ys,
						name: () => gs,
						parse: () => bs,
						structure: () => fs,
					})
				var E = {}
				n.r(E),
					n.d(E, {
						generate: () => ws,
						name: () => ks,
						parse: () => xs,
						structure: () => vs,
					})
				var j = {}
				n.r(j),
					n.d(j, {
						generate: () => Ls,
						name: () => Ss,
						parse: () => As,
						structure: () => zs,
						walkContext: () => Cs,
					})
				var D = {}
				n.r(D),
					n.d(D, {
						generate: () => js,
						name: () => Ts,
						parse: () => Es,
						structure: () => Ps,
						walkContext: () => Os,
					})
				var I = {}
				n.r(I),
					n.d(I, {
						generate: () => Rs,
						name: () => Ns,
						parse: () => Bs,
						structure: () => _s,
					})
				var M = {}
				n.r(M),
					n.d(M, {
						generate: () => Vs,
						name: () => Fs,
						parse: () => Ws,
						structure: () => Us,
					})
				var N = {}
				n.r(N),
					n.d(N, {
						generate: () => Ys,
						name: () => Qs,
						parse: () => Xs,
						structure: () => $s,
						walkContext: () => Ks,
					})
				var _ = {}
				n.r(_),
					n.d(_, {
						generate: () => tl,
						name: () => Zs,
						parse: () => el,
						structure: () => Js,
					})
				var B = {}
				n.r(B),
					n.d(B, {
						generate: () => al,
						name: () => nl,
						parse: () => il,
						structure: () => ol,
						walkContext: () => rl,
					})
				var R = {}
				n.r(R),
					n.d(R, {
						generate: () => ml,
						name: () => hl,
						parse: () => dl,
						structure: () => pl,
					})
				var q = {}
				n.r(q),
					n.d(q, {
						generate: () => xl,
						name: () => bl,
						parse: () => vl,
						structure: () => kl,
						walkContext: () => yl,
					})
				var F = {}
				n.r(F),
					n.d(F, {
						generate: () => Tl,
						name: () => zl,
						parse: () => Ll,
						structure: () => Al,
					})
				var U = {}
				n.r(U),
					n.d(U, {
						generate: () => Rl,
						name: () => Nl,
						parse: () => Bl,
						structure: () => _l,
					})
				var W = {}
				n.r(W),
					n.d(W, {
						generate: () => $l,
						name: () => Gl,
						parse: () => Kl,
						structure: () => Ql,
					})
				var V = {}
				n.r(V),
					n.d(V, {
						generate: () => Jl,
						name: () => Xl,
						parse: () => Zl,
						structure: () => Yl,
					})
				var H = {}
				n.r(H),
					n.d(H, {
						generate: () => oc,
						name: () => tc,
						parse: () => rc,
						structure: () => nc,
					})
				var G = {}
				n.r(G),
					n.d(G, {
						AnPlusB: () => i,
						Atrule: () => a,
						AtrulePrelude: () => s,
						AttributeSelector: () => l,
						Block: () => c,
						Brackets: () => u,
						CDC: () => h,
						CDO: () => p,
						ClassSelector: () => d,
						Combinator: () => m,
						Comment: () => g,
						Declaration: () => f,
						DeclarationList: () => b,
						Dimension: () => y,
						Function: () => k,
						Hash: () => v,
						IdSelector: () => w,
						Identifier: () => x,
						MediaFeature: () => S,
						MediaQuery: () => C,
						MediaQueryList: () => z,
						NestingSelector: () => A,
						Nth: () => L,
						Number: () => T,
						Operator: () => O,
						Parentheses: () => P,
						Percentage: () => E,
						PseudoClassSelector: () => j,
						PseudoElementSelector: () => D,
						Ratio: () => I,
						Raw: () => M,
						Rule: () => N,
						Selector: () => _,
						SelectorList: () => B,
						String: () => R,
						StyleSheet: () => q,
						TypeSelector: () => F,
						UnicodeRange: () => U,
						Url: () => W,
						Value: () => V,
						WhiteSpace: () => H,
					})
				var Q = {}
				n.r(Q),
					n.d(Q, { AtrulePrelude: () => pc, Selector: () => dc, Value: () => gc })
				var K = {}
				n.r(K),
					n.d(K, {
						AnPlusB: () => No,
						Atrule: () => Wo,
						AtrulePrelude: () => Ko,
						AttributeSelector: () => ai,
						Block: () => fi,
						Brackets: () => vi,
						CDC: () => Ci,
						CDO: () => Ti,
						ClassSelector: () => Di,
						Combinator: () => Fi,
						Comment: () => Qi,
						Declaration: () => la,
						DeclarationList: () => fa,
						Dimension: () => va,
						Function: () => za,
						Hash: () => Pa,
						IdSelector: () => Ba,
						Identifier: () => Ia,
						MediaFeature: () => Ua,
						MediaQuery: () => Ga,
						MediaQueryList: () => Xa,
						NestingSelector: () => ts,
						Nth: () => is,
						Number: () => cs,
						Operator: () => ds,
						Parentheses: () => bs,
						Percentage: () => xs,
						PseudoClassSelector: () => As,
						PseudoElementSelector: () => Es,
						Ratio: () => Bs,
						Raw: () => Ws,
						Rule: () => Xs,
						Selector: () => el,
						SelectorList: () => il,
						String: () => dl,
						StyleSheet: () => vl,
						TypeSelector: () => Ll,
						UnicodeRange: () => Bl,
						Url: () => Kl,
						Value: () => Zl,
						WhiteSpace: () => rc,
					})
				const $ = 1,
					X = 2,
					Y = 3,
					Z = 4,
					J = 5,
					ee = 6,
					te = 7,
					ne = 8,
					re = 9,
					oe = 10,
					ie = 11,
					ae = 12,
					se = 13,
					le = 14,
					ce = 15,
					ue = 16,
					he = 17,
					pe = 18,
					de = 19,
					me = 20,
					ge = 21,
					fe = 22,
					be = 23,
					ye = 24,
					ke = 25,
					ve = 0
				function xe(e) {
					return e >= 48 && e <= 57
				}
				function we(e) {
					return xe(e) || (e >= 65 && e <= 70) || (e >= 97 && e <= 102)
				}
				function Se(e) {
					return e >= 65 && e <= 90
				}
				function Ce(e) {
					return (
						(function (e) {
							return (
								Se(e) ||
								(function (e) {
									return e >= 97 && e <= 122
								})(e)
							)
						})(e) ||
						(function (e) {
							return e >= 128
						})(e) ||
						95 === e
					)
				}
				function ze(e) {
					return Ce(e) || xe(e) || 45 === e
				}
				function Ae(e) {
					return (e >= 0 && e <= 8) || 11 === e || (e >= 14 && e <= 31) || 127 === e
				}
				function Le(e) {
					return 10 === e || 13 === e || 12 === e
				}
				function Te(e) {
					return Le(e) || 32 === e || 9 === e
				}
				function Oe(e, t) {
					return 92 === e && !Le(t) && t !== ve
				}
				function Pe(e, t, n) {
					return 45 === e
						? Ce(t) || 45 === t || Oe(t, n)
						: !!Ce(e) || (92 === e && Oe(e, t))
				}
				function Ee(e, t, n) {
					return 43 === e || 45 === e
						? xe(t)
							? 2
							: 46 === t && xe(n)
							? 3
							: 0
						: 46 === e
						? xe(t)
							? 2
							: 0
						: xe(e)
						? 1
						: 0
				}
				function je(e) {
					return 65279 === e || 65534 === e ? 1 : 0
				}
				const De = new Array(128),
					Ie = 130,
					Me = 131,
					Ne = 132,
					_e = 133
				for (let e = 0; e < De.length; e++)
					De[e] =
						(Te(e) && Ie) ||
						(xe(e) && Me) ||
						(Ce(e) && Ne) ||
						(Ae(e) && _e) ||
						e ||
						128
				function Be(e) {
					return e < 128 ? De[e] : Ne
				}
				function Re(e, t) {
					return t < e.length ? e.charCodeAt(t) : 0
				}
				function qe(e, t, n) {
					return 13 === n && 10 === Re(e, t + 1) ? 2 : 1
				}
				function Fe(e, t, n) {
					let r = e.charCodeAt(t)
					return Se(r) && (r |= 32), r === n
				}
				function Ue(e, t, n, r) {
					if (n - t !== r.length) return !1
					if (t < 0 || n > e.length) return !1
					for (let o = t; o < n; o++) {
						const n = r.charCodeAt(o - t)
						let i = e.charCodeAt(o)
						if ((Se(i) && (i |= 32), i !== n)) return !1
					}
					return !0
				}
				function We(e, t) {
					for (; t < e.length && Te(e.charCodeAt(t)); t++);
					return t
				}
				function Ve(e, t) {
					for (; t < e.length && xe(e.charCodeAt(t)); t++);
					return t
				}
				function He(e, t) {
					if (we(Re(e, (t += 2) - 1))) {
						for (const n = Math.min(e.length, t + 5); t < n && we(Re(e, t)); t++);
						const n = Re(e, t)
						Te(n) && (t += qe(e, t, n))
					}
					return t
				}
				function Ge(e, t) {
					for (; t < e.length; t++) {
						const n = e.charCodeAt(t)
						if (!ze(n)) {
							if (!Oe(n, Re(e, t + 1))) break
							t = He(e, t) - 1
						}
					}
					return t
				}
				function Qe(e, t) {
					let n = e.charCodeAt(t)
					if (
						((43 !== n && 45 !== n) || (n = e.charCodeAt((t += 1))),
						xe(n) && ((t = Ve(e, t + 1)), (n = e.charCodeAt(t))),
						46 === n && xe(e.charCodeAt(t + 1)) && (t = Ve(e, (t += 2))),
						Fe(e, t, 101))
					) {
						let r = 0
						;(n = e.charCodeAt(t + 1)),
							(45 !== n && 43 !== n) || ((r = 1), (n = e.charCodeAt(t + 2))),
							xe(n) && (t = Ve(e, t + 1 + r + 1))
					}
					return t
				}
				function Ke(e, t) {
					for (; t < e.length; t++) {
						const n = e.charCodeAt(t)
						if (41 === n) {
							t++
							break
						}
						Oe(n, Re(e, t + 1)) && (t = He(e, t))
					}
					return t
				}
				function $e(e) {
					if (1 === e.length && !we(e.charCodeAt(0))) return e[0]
					let t = parseInt(e, 16)
					return (
						(0 === t || (t >= 55296 && t <= 57343) || t > 1114111) && (t = 65533),
						String.fromCodePoint(t)
					)
				}
				const Xe = [
						'EOF-token',
						'ident-token',
						'function-token',
						'at-keyword-token',
						'hash-token',
						'string-token',
						'bad-string-token',
						'url-token',
						'bad-url-token',
						'delim-token',
						'number-token',
						'percentage-token',
						'dimension-token',
						'whitespace-token',
						'CDO-token',
						'CDC-token',
						'colon-token',
						'semicolon-token',
						'comma-token',
						'[-token',
						']-token',
						'(-token',
						')-token',
						'{-token',
						'}-token',
					],
					Ye = 16384
				function Ze(e = null, t) {
					return null === e || e.length < t
						? new Uint32Array(Math.max(t + 1024, Ye))
						: e
				}
				const Je = 10,
					et = 12,
					tt = 13
				function nt(e) {
					const t = e.source,
						n = t.length,
						r = t.length > 0 ? je(t.charCodeAt(0)) : 0,
						o = Ze(e.lines, n),
						i = Ze(e.columns, n)
					let a = e.startLine,
						s = e.startColumn
					for (let e = r; e < n; e++) {
						const r = t.charCodeAt(e)
						;(o[e] = a),
							(i[e] = s++),
							(r !== Je && r !== tt && r !== et) ||
								(r === tt &&
									e + 1 < n &&
									t.charCodeAt(e + 1) === Je &&
									(e++, (o[e] = a), (i[e] = s)),
								a++,
								(s = 1))
					}
					;(o[n] = a), (i[n] = s), (e.lines = o), (e.columns = i), (e.computed = !0)
				}
				class rt {
					constructor() {
						;(this.lines = null), (this.columns = null), (this.computed = !1)
					}
					setSource(e, t = 0, n = 1, r = 1) {
						;(this.source = e),
							(this.startOffset = t),
							(this.startLine = n),
							(this.startColumn = r),
							(this.computed = !1)
					}
					getLocation(e, t) {
						return (
							this.computed || nt(this),
							{
								source: t,
								offset: this.startOffset + e,
								line: this.lines[e],
								column: this.columns[e],
							}
						)
					}
					getLocationRange(e, t, n) {
						return (
							this.computed || nt(this),
							{
								source: n,
								start: {
									offset: this.startOffset + e,
									line: this.lines[e],
									column: this.columns[e],
								},
								end: {
									offset: this.startOffset + t,
									line: this.lines[t],
									column: this.columns[t],
								},
							}
						)
					}
				}
				const ot = 16777215,
					it = 24,
					at = new Map([
						[X, fe],
						[ge, fe],
						[de, me],
						[be, ye],
					])
				class st {
					constructor(e, t) {
						this.setSource(e, t)
					}
					reset() {
						;(this.eof = !1),
							(this.tokenIndex = -1),
							(this.tokenType = 0),
							(this.tokenStart = this.firstCharOffset),
							(this.tokenEnd = this.firstCharOffset)
					}
					setSource(e = '', t = () => {}) {
						const n = (e = String(e || '')).length,
							r = Ze(this.offsetAndType, e.length + 1),
							o = Ze(this.balance, e.length + 1)
						let i = 0,
							a = 0,
							s = 0,
							l = -1
						for (
							this.offsetAndType = null,
								this.balance = null,
								t(e, (e, t, c) => {
									switch (e) {
										default:
											o[i] = n
											break
										case a: {
											let e = s & ot
											for (s = o[e], a = s >> it, o[i] = e, o[e++] = i; e < i; e++)
												o[e] === n && (o[e] = i)
											break
										}
										case ge:
										case X:
										case de:
										case be:
											;(o[i] = s), (a = at.get(e)), (s = (a << it) | i)
									}
									;(r[i++] = (e << it) | c), -1 === l && (l = t)
								}),
								r[i] = 0 | n,
								o[i] = n,
								o[n] = n;
							0 !== s;

						) {
							const e = s & ot
							;(s = o[e]), (o[e] = n)
						}
						;(this.source = e),
							(this.firstCharOffset = -1 === l ? 0 : l),
							(this.tokenCount = i),
							(this.offsetAndType = r),
							(this.balance = o),
							this.reset(),
							this.next()
					}
					lookupType(e) {
						return (e += this.tokenIndex) < this.tokenCount
							? this.offsetAndType[e] >> it
							: 0
					}
					lookupOffset(e) {
						return (e += this.tokenIndex) < this.tokenCount
							? this.offsetAndType[e - 1] & ot
							: this.source.length
					}
					lookupValue(e, t) {
						return (
							(e += this.tokenIndex) < this.tokenCount &&
							Ue(
								this.source,
								this.offsetAndType[e - 1] & ot,
								this.offsetAndType[e] & ot,
								t
							)
						)
					}
					getTokenStart(e) {
						return e === this.tokenIndex
							? this.tokenStart
							: e > 0
							? e < this.tokenCount
								? this.offsetAndType[e - 1] & ot
								: this.offsetAndType[this.tokenCount] & ot
							: this.firstCharOffset
					}
					substrToCursor(e) {
						return this.source.substring(e, this.tokenStart)
					}
					isBalanceEdge(e) {
						return this.balance[this.tokenIndex] < e
					}
					isDelim(e, t) {
						return t
							? this.lookupType(t) === re &&
									this.source.charCodeAt(this.lookupOffset(t)) === e
							: this.tokenType === re && this.source.charCodeAt(this.tokenStart) === e
					}
					skip(e) {
						let t = this.tokenIndex + e
						t < this.tokenCount
							? ((this.tokenIndex = t),
							  (this.tokenStart = this.offsetAndType[t - 1] & ot),
							  (t = this.offsetAndType[t]),
							  (this.tokenType = t >> it),
							  (this.tokenEnd = t & ot))
							: ((this.tokenIndex = this.tokenCount), this.next())
					}
					next() {
						let e = this.tokenIndex + 1
						e < this.tokenCount
							? ((this.tokenIndex = e),
							  (this.tokenStart = this.tokenEnd),
							  (e = this.offsetAndType[e]),
							  (this.tokenType = e >> it),
							  (this.tokenEnd = e & ot))
							: ((this.eof = !0),
							  (this.tokenIndex = this.tokenCount),
							  (this.tokenType = 0),
							  (this.tokenStart = this.tokenEnd = this.source.length))
					}
					skipSC() {
						for (; this.tokenType === se || this.tokenType === ke; ) this.next()
					}
					skipUntilBalanced(e, t) {
						let n,
							r,
							o = e
						e: for (; o < this.tokenCount && ((n = this.balance[o]), !(n < e)); o++)
							switch (
								((r = o > 0 ? this.offsetAndType[o - 1] & ot : this.firstCharOffset),
								t(this.source.charCodeAt(r)))
							) {
								case 1:
									break e
								case 2:
									o++
									break e
								default:
									this.balance[n] === o && (o = n)
							}
						this.skip(o - this.tokenIndex)
					}
					forEachToken(e) {
						for (let t = 0, n = this.firstCharOffset; t < this.tokenCount; t++) {
							const r = n,
								o = this.offsetAndType[t],
								i = o & ot
							;(n = i), e(o >> it, r, i, t)
						}
					}
					dump() {
						const e = new Array(this.tokenCount)
						return (
							this.forEachToken((t, n, r, o) => {
								e[o] = {
									idx: o,
									type: Xe[t],
									chunk: this.source.substring(n, r),
									balance: this.balance[o],
								}
							}),
							e
						)
					}
				}
				function lt(e, t) {
					function n(t) {
						return t < a ? e.charCodeAt(t) : 0
					}
					function r() {
						return (
							(c = Qe(e, c)),
							Pe(n(c), n(c + 1), n(c + 2))
								? ((s = ae), void (c = Ge(e, c)))
								: 37 === n(c)
								? ((s = ie), void c++)
								: void (s = oe)
						)
					}
					function o() {
						const t = c
						return (
							(c = Ge(e, c)),
							Ue(e, t, c, 'url') && 40 === n(c)
								? ((c = We(e, c + 1)),
								  34 === n(c) || 39 === n(c)
										? ((s = X), void (c = t + 4))
										: void (function () {
												for (s = te, c = We(e, c); c < e.length; c++) {
													const t = e.charCodeAt(c)
													switch (Be(t)) {
														case 41:
															return void c++
														case Ie:
															return (
																(c = We(e, c)),
																41 === n(c) || c >= e.length
																	? void (c < e.length && c++)
																	: ((c = Ke(e, c)), void (s = ne))
															)
														case 34:
														case 39:
														case 40:
														case _e:
															return (c = Ke(e, c)), void (s = ne)
														case 92:
															if (Oe(t, n(c + 1))) {
																c = He(e, c) - 1
																break
															}
															return (c = Ke(e, c)), void (s = ne)
													}
												}
										  })())
								: 40 === n(c)
								? ((s = X), void c++)
								: void (s = $)
						)
					}
					function i(t) {
						for (t || (t = n(c++)), s = J; c < e.length; c++) {
							const r = e.charCodeAt(c)
							switch (Be(r)) {
								case t:
									return void c++
								case Ie:
									if (Le(r)) return (c += qe(e, c, r)), void (s = ee)
									break
								case 92:
									if (c === e.length - 1) break
									const o = n(c + 1)
									Le(o) ? (c += qe(e, c + 1, o)) : Oe(r, o) && (c = He(e, c) - 1)
							}
						}
					}
					const a = (e = String(e || '')).length
					let s,
						l = je(n(0)),
						c = l
					for (; c < a; ) {
						const a = e.charCodeAt(c)
						switch (Be(a)) {
							case Ie:
								;(s = se), (c = We(e, c + 1))
								break
							case 34:
								i()
								break
							case 35:
								ze(n(c + 1)) || Oe(n(c + 1), n(c + 2))
									? ((s = Z), (c = Ge(e, c + 1)))
									: ((s = re), c++)
								break
							case 39:
								i()
								break
							case 40:
								;(s = ge), c++
								break
							case 41:
								;(s = fe), c++
								break
							case 43:
								Ee(a, n(c + 1), n(c + 2)) ? r() : ((s = re), c++)
								break
							case 44:
								;(s = pe), c++
								break
							case 45:
								Ee(a, n(c + 1), n(c + 2))
									? r()
									: 45 === n(c + 1) && 62 === n(c + 2)
									? ((s = ce), (c += 3))
									: Pe(a, n(c + 1), n(c + 2))
									? o()
									: ((s = re), c++)
								break
							case 46:
								Ee(a, n(c + 1), n(c + 2)) ? r() : ((s = re), c++)
								break
							case 47:
								42 === n(c + 1)
									? ((s = ke),
									  (c = e.indexOf('*/', c + 2)),
									  (c = -1 === c ? e.length : c + 2))
									: ((s = re), c++)
								break
							case 58:
								;(s = ue), c++
								break
							case 59:
								;(s = he), c++
								break
							case 60:
								33 === n(c + 1) && 45 === n(c + 2) && 45 === n(c + 3)
									? ((s = le), (c += 4))
									: ((s = re), c++)
								break
							case 64:
								Pe(n(c + 1), n(c + 2), n(c + 3))
									? ((s = Y), (c = Ge(e, c + 1)))
									: ((s = re), c++)
								break
							case 91:
								;(s = de), c++
								break
							case 92:
								Oe(a, n(c + 1)) ? o() : ((s = re), c++)
								break
							case 93:
								;(s = me), c++
								break
							case 123:
								;(s = be), c++
								break
							case 125:
								;(s = ye), c++
								break
							case Me:
								r()
								break
							case Ne:
								o()
								break
							default:
								;(s = re), c++
						}
						t(s, l, (l = c))
					}
				}
				let ct = null
				class ut {
					static createItem(e) {
						return { prev: null, next: null, data: e }
					}
					constructor() {
						;(this.head = null), (this.tail = null), (this.cursor = null)
					}
					createItem(e) {
						return ut.createItem(e)
					}
					allocateCursor(e, t) {
						let n
						return (
							null !== ct
								? ((n = ct),
								  (ct = ct.cursor),
								  (n.prev = e),
								  (n.next = t),
								  (n.cursor = this.cursor))
								: (n = { prev: e, next: t, cursor: this.cursor }),
							(this.cursor = n),
							n
						)
					}
					releaseCursor() {
						const { cursor: e } = this
						;(this.cursor = e.cursor),
							(e.prev = null),
							(e.next = null),
							(e.cursor = ct),
							(ct = e)
					}
					updateCursors(e, t, n, r) {
						let { cursor: o } = this
						for (; null !== o; )
							o.prev === e && (o.prev = t),
								o.next === n && (o.next = r),
								(o = o.cursor)
					}
					*[Symbol.iterator]() {
						for (let e = this.head; null !== e; e = e.next) yield e.data
					}
					get size() {
						let e = 0
						for (let t = this.head; null !== t; t = t.next) e++
						return e
					}
					get isEmpty() {
						return null === this.head
					}
					get first() {
						return this.head && this.head.data
					}
					get last() {
						return this.tail && this.tail.data
					}
					fromArray(e) {
						let t = null
						this.head = null
						for (let n of e) {
							const e = ut.createItem(n)
							null !== t ? (t.next = e) : (this.head = e), (e.prev = t), (t = e)
						}
						return (this.tail = t), this
					}
					toArray() {
						return [...this]
					}
					toJSON() {
						return [...this]
					}
					forEach(e, t = this) {
						const n = this.allocateCursor(null, this.head)
						for (; null !== n.next; ) {
							const r = n.next
							;(n.next = r.next), e.call(t, r.data, r, this)
						}
						this.releaseCursor()
					}
					forEachRight(e, t = this) {
						const n = this.allocateCursor(this.tail, null)
						for (; null !== n.prev; ) {
							const r = n.prev
							;(n.prev = r.prev), e.call(t, r.data, r, this)
						}
						this.releaseCursor()
					}
					reduce(e, t, n = this) {
						let r,
							o = this.allocateCursor(null, this.head),
							i = t
						for (; null !== o.next; )
							(r = o.next), (o.next = r.next), (i = e.call(n, i, r.data, r, this))
						return this.releaseCursor(), i
					}
					reduceRight(e, t, n = this) {
						let r,
							o = this.allocateCursor(this.tail, null),
							i = t
						for (; null !== o.prev; )
							(r = o.prev), (o.prev = r.prev), (i = e.call(n, i, r.data, r, this))
						return this.releaseCursor(), i
					}
					some(e, t = this) {
						for (let n = this.head; null !== n; n = n.next)
							if (e.call(t, n.data, n, this)) return !0
						return !1
					}
					map(e, t = this) {
						const n = new ut()
						for (let r = this.head; null !== r; r = r.next)
							n.appendData(e.call(t, r.data, r, this))
						return n
					}
					filter(e, t = this) {
						const n = new ut()
						for (let r = this.head; null !== r; r = r.next)
							e.call(t, r.data, r, this) && n.appendData(r.data)
						return n
					}
					nextUntil(e, t, n = this) {
						if (null === e) return
						const r = this.allocateCursor(null, e)
						for (; null !== r.next; ) {
							const e = r.next
							if (((r.next = e.next), t.call(n, e.data, e, this))) break
						}
						this.releaseCursor()
					}
					prevUntil(e, t, n = this) {
						if (null === e) return
						const r = this.allocateCursor(e, null)
						for (; null !== r.prev; ) {
							const e = r.prev
							if (((r.prev = e.prev), t.call(n, e.data, e, this))) break
						}
						this.releaseCursor()
					}
					clear() {
						;(this.head = null), (this.tail = null)
					}
					copy() {
						const e = new ut()
						for (let t of this) e.appendData(t)
						return e
					}
					prepend(e) {
						return (
							this.updateCursors(null, e, this.head, e),
							null !== this.head
								? ((this.head.prev = e), (e.next = this.head))
								: (this.tail = e),
							(this.head = e),
							this
						)
					}
					prependData(e) {
						return this.prepend(ut.createItem(e))
					}
					append(e) {
						return this.insert(e)
					}
					appendData(e) {
						return this.insert(ut.createItem(e))
					}
					insert(e, t = null) {
						if (null !== t)
							if ((this.updateCursors(t.prev, e, t, e), null === t.prev)) {
								if (this.head !== t) throw new Error("before doesn't belong to list")
								;(this.head = e),
									(t.prev = e),
									(e.next = t),
									this.updateCursors(null, e)
							} else (t.prev.next = e), (e.prev = t.prev), (t.prev = e), (e.next = t)
						else
							this.updateCursors(this.tail, e, null, e),
								null !== this.tail
									? ((this.tail.next = e), (e.prev = this.tail))
									: (this.head = e),
								(this.tail = e)
						return this
					}
					insertData(e, t) {
						return this.insert(ut.createItem(e), t)
					}
					remove(e) {
						if ((this.updateCursors(e, e.prev, e, e.next), null !== e.prev))
							e.prev.next = e.next
						else {
							if (this.head !== e) throw new Error("item doesn't belong to list")
							this.head = e.next
						}
						if (null !== e.next) e.next.prev = e.prev
						else {
							if (this.tail !== e) throw new Error("item doesn't belong to list")
							this.tail = e.prev
						}
						return (e.prev = null), (e.next = null), e
					}
					push(e) {
						this.insert(ut.createItem(e))
					}
					pop() {
						return null !== this.tail ? this.remove(this.tail) : null
					}
					unshift(e) {
						this.prepend(ut.createItem(e))
					}
					shift() {
						return null !== this.head ? this.remove(this.head) : null
					}
					prependList(e) {
						return this.insertList(e, this.head)
					}
					appendList(e) {
						return this.insertList(e)
					}
					insertList(e, t) {
						return (
							null === e.head ||
								(null != t
									? (this.updateCursors(t.prev, e.tail, t, e.head),
									  null !== t.prev
											? ((t.prev.next = e.head), (e.head.prev = t.prev))
											: (this.head = e.head),
									  (t.prev = e.tail),
									  (e.tail.next = t))
									: (this.updateCursors(this.tail, e.tail, null, e.head),
									  null !== this.tail
											? ((this.tail.next = e.head), (e.head.prev = this.tail))
											: (this.head = e.head),
									  (this.tail = e.tail)),
								(e.head = null),
								(e.tail = null)),
							this
						)
					}
					replace(e, t) {
						'head' in t ? this.insertList(t, e) : this.insert(t, e), this.remove(e)
					}
				}
				function ht(e, t) {
					const n = Object.create(SyntaxError.prototype),
						r = new Error()
					return Object.assign(n, {
						name: e,
						message: t,
						get stack() {
							return (r.stack || '').replace(/^(.+\n){1,3}/, `${e}: ${t}\n`)
						},
					})
				}
				const pt = 100,
					dt = 60,
					mt = '    '
				function gt({ source: e, line: t, column: n }, r) {
					function o(e, t) {
						return i
							.slice(e, t)
							.map((t, n) => String(e + n + 1).padStart(l) + ' |' + t)
							.join('\n')
					}
					const i = e.split(/\r\n?|\n|\f/),
						a = Math.max(1, t - r) - 1,
						s = Math.min(t + r, i.length + 1),
						l = Math.max(4, String(s).length) + 1
					let c = 0
					;(n +=
						(mt.length - 1) * (i[t - 1].substr(0, n - 1).match(/\t/g) || []).length) >
						pt && ((c = n - dt + 3), (n = dt - 2))
					for (let e = a; e <= s; e++)
						e >= 0 &&
							e < i.length &&
							((i[e] = i[e].replace(/\t/g, mt)),
							(i[e] =
								(c > 0 && i[e].length > c ? '…' : '') +
								i[e].substr(c, pt - 2) +
								(i[e].length > c + pt - 1 ? '…' : '')))
					return [o(a, t), new Array(n + l + 2).join('-') + '^', o(t, s)]
						.filter(Boolean)
						.join('\n')
				}
				function ft(e, t, n, r, o) {
					return Object.assign(ht('SyntaxError', e), {
						source: t,
						offset: n,
						line: r,
						column: o,
						sourceFragment: (e) =>
							gt({ source: t, line: r, column: o }, isNaN(e) ? 0 : e),
						get formattedMessage() {
							return `Parse error: ${e}\n` + gt({ source: t, line: r, column: o }, 2)
						},
					})
				}
				function bt(e) {
					const t = this.createList()
					let n = !1
					const r = { recognizer: e }
					for (; !this.eof; ) {
						switch (this.tokenType) {
							case ke:
								this.next()
								continue
							case se:
								;(n = !0), this.next()
								continue
						}
						let o = e.getNode.call(this, r)
						if (void 0 === o) break
						n && (e.onWhiteSpace && e.onWhiteSpace.call(this, o, t, r), (n = !1)),
							t.push(o)
					}
					return n && e.onWhiteSpace && e.onWhiteSpace.call(this, null, t, r), t
				}
				const yt = () => {},
					kt = 33,
					vt = 35,
					xt = 59,
					wt = 123,
					St = 0
				function Ct(e) {
					return function () {
						return this[e]()
					}
				}
				function zt(e) {
					const t = Object.create(null)
					for (const n in e) {
						const r = e[n],
							o = r.parse || r
						o && (t[n] = o)
					}
					return t
				}
				var At = n(508)
				const Lt = new Set(['Atrule', 'Selector', 'Declaration']),
					Tt = 43,
					Ot = 45,
					Pt = (e, t) => {
						if ((e === re && (e = t), 'string' == typeof e)) {
							const t = e.charCodeAt(0)
							return t > 127 ? 32768 : t << 8
						}
						return e
					},
					Et = [
						[$, $],
						[$, X],
						[$, te],
						[$, ne],
						[$, '-'],
						[$, oe],
						[$, ie],
						[$, ae],
						[$, ce],
						[$, ge],
						[Y, $],
						[Y, X],
						[Y, te],
						[Y, ne],
						[Y, '-'],
						[Y, oe],
						[Y, ie],
						[Y, ae],
						[Y, ce],
						[Z, $],
						[Z, X],
						[Z, te],
						[Z, ne],
						[Z, '-'],
						[Z, oe],
						[Z, ie],
						[Z, ae],
						[Z, ce],
						[ae, $],
						[ae, X],
						[ae, te],
						[ae, ne],
						[ae, '-'],
						[ae, oe],
						[ae, ie],
						[ae, ae],
						[ae, ce],
						['#', $],
						['#', X],
						['#', te],
						['#', ne],
						['#', '-'],
						['#', oe],
						['#', ie],
						['#', ae],
						['#', ce],
						['-', $],
						['-', X],
						['-', te],
						['-', ne],
						['-', '-'],
						['-', oe],
						['-', ie],
						['-', ae],
						['-', ce],
						[oe, $],
						[oe, X],
						[oe, te],
						[oe, ne],
						[oe, oe],
						[oe, ie],
						[oe, ae],
						[oe, '%'],
						[oe, ce],
						['@', $],
						['@', X],
						['@', te],
						['@', ne],
						['@', '-'],
						['@', ce],
						['.', oe],
						['.', ie],
						['.', ae],
						['+', oe],
						['+', ie],
						['+', ae],
						['/', '*'],
					],
					jt = Et.concat([
						[$, Z],
						[ae, Z],
						[Z, Z],
						[Y, ge],
						[Y, J],
						[Y, ue],
						[ie, ie],
						[ie, ae],
						[ie, X],
						[ie, '-'],
						[fe, $],
						[fe, X],
						[fe, ie],
						[fe, ae],
						[fe, Z],
						[fe, '-'],
					])
				function Dt(e) {
					const t = new Set(e.map(([e, t]) => (Pt(e) << 16) | Pt(t)))
					return function (e, n, r) {
						const o = Pt(n, r),
							i = r.charCodeAt(0)
						return (
							((i === Ot && n !== $ && n !== X && n !== ce) || i === Tt
								? t.has((e << 16) | (i << 8))
								: t.has((e << 16) | o)) && this.emit(' ', se, !0),
							o
						)
					}
				}
				const It = Dt(Et),
					Mt = Dt(jt),
					Nt = 92
				function _t(e, t) {
					if ('function' != typeof t) e.children.forEach(this.node, this)
					else {
						let n = null
						e.children.forEach((e) => {
							null !== n && t.call(this, n), this.node(e), (n = e)
						})
					}
				}
				function Bt(e) {
					lt(e, (t, n, r) => {
						this.token(t, e.slice(n, r))
					})
				}
				const { hasOwnProperty: Rt } = Object.prototype,
					qt = function () {}
				function Ft(e) {
					return 'function' == typeof e ? e : qt
				}
				function Ut(e, t) {
					return function (n, r, o) {
						n.type === t && e.call(this, n, r, o)
					}
				}
				function Wt(e, t) {
					const n = t.structure,
						r = []
					for (const e in n) {
						if (!1 === Rt.call(n, e)) continue
						let t = n[e]
						const o = { name: e, type: !1, nullable: !1 }
						Array.isArray(t) || (t = [t])
						for (const e of t)
							null === e
								? (o.nullable = !0)
								: 'string' == typeof e
								? (o.type = 'node')
								: Array.isArray(e) && (o.type = 'list')
						o.type && r.push(o)
					}
					return r.length ? { context: t.walkContext, fields: r } : null
				}
				function Vt(e, t) {
					const n = e.fields.slice(),
						r = e.context,
						o = 'string' == typeof r
					return (
						t && n.reverse(),
						function (e, i, a, s) {
							let l
							o && ((l = i[r]), (i[r] = e))
							for (const r of n) {
								const n = e[r.name]
								if (!r.nullable || n)
									if ('list' === r.type) {
										if (t ? n.reduceRight(s, !1) : n.reduce(s, !1)) return !0
									} else if (a(n)) return !0
							}
							o && (i[r] = l)
						}
					)
				}
				function Ht({
					StyleSheet: e,
					Atrule: t,
					Rule: n,
					Block: r,
					DeclarationList: o,
				}) {
					return {
						Atrule: { StyleSheet: e, Atrule: t, Rule: n, Block: r },
						Rule: { StyleSheet: e, Atrule: t, Rule: n, Block: r },
						Declaration: {
							StyleSheet: e,
							Atrule: t,
							Rule: n,
							Block: r,
							DeclarationList: o,
						},
					}
				}
				function Gt(e) {
					return e
				}
				function Qt(e, t, n, r) {
					let o
					switch (e.type) {
						case 'Group':
							o =
								(function (e, t, n, r) {
									const o =
											' ' === e.combinator || r ? e.combinator : ' ' + e.combinator + ' ',
										i = e.terms.map((e) => Qt(e, t, n, r)).join(o)
									return e.explicit || n
										? (r || ',' === i[0] ? '[' : '[ ') + i + (r ? ']' : ' ]')
										: i
								})(e, t, n, r) + (e.disallowEmpty ? '!' : '')
							break
						case 'Multiplier':
							return (
								Qt(e.term, t, n, r) +
								t(
									(function (e) {
										const { min: t, max: n, comma: r } = e
										return 0 === t && 0 === n
											? r
												? '#?'
												: '*'
											: 0 === t && 1 === n
											? '?'
											: 1 === t && 0 === n
											? r
												? '#'
												: '+'
											: 1 === t && 1 === n
											? ''
											: (r ? '#' : '') +
											  (t === n
													? '{' + t + '}'
													: '{' + t + ',' + (0 !== n ? n : '') + '}')
									})(e),
									e
								)
							)
						case 'Type':
							o =
								'<' +
								e.name +
								(e.opts
									? t(
											(function (e) {
												if ('Range' === e.type)
													return (
														' [' +
														(null === e.min ? '-∞' : e.min) +
														',' +
														(null === e.max ? '∞' : e.max) +
														']'
													)
												throw new Error('Unknown node type `' + e.type + '`')
											})(e.opts),
											e.opts
									  )
									: '') +
								'>'
							break
						case 'Property':
							o = "<'" + e.name + "'>"
							break
						case 'Keyword':
							o = e.name
							break
						case 'AtKeyword':
							o = '@' + e.name
							break
						case 'Function':
							o = e.name + '('
							break
						case 'String':
						case 'Token':
							o = e.value
							break
						case 'Comma':
							o = ','
							break
						default:
							throw new Error('Unknown node type `' + e.type + '`')
					}
					return t(o, e)
				}
				function Kt(e, t) {
					let n = Gt,
						r = !1,
						o = !1
					return (
						'function' == typeof t
							? (n = t)
							: t &&
							  ((r = Boolean(t.forceBraces)),
							  (o = Boolean(t.compact)),
							  'function' == typeof t.decorate && (n = t.decorate)),
						Qt(e, n, r, o)
					)
				}
				const $t = { offset: 0, line: 1, column: 1 }
				function Xt(e, t) {
					const n = e && e.loc && e.loc[t]
					return n ? ('line' in n ? Yt(n) : n) : null
				}
				function Yt({ offset: e, line: t, column: n }, r) {
					const o = { offset: e, line: t, column: n }
					if (r) {
						const e = r.split(/\n|\r\n?|\f/)
						;(o.offset += r.length),
							(o.line += e.length - 1),
							(o.column = 1 === e.length ? o.column + r.length : e.pop().length + 1)
					}
					return o
				}
				const Zt = function (e, t) {
						const n = ht('SyntaxReferenceError', e + (t ? ' `' + t + '`' : ''))
						return (n.reference = t), n
					},
					Jt = function (e, t, n, r) {
						const o = ht('SyntaxMatchError', e),
							{
								css: i,
								mismatchOffset: a,
								mismatchLength: s,
								start: l,
								end: c,
							} = (function (e, t) {
								const n = e.tokens,
									r = e.longestMatch,
									o = (r < n.length && n[r].node) || null,
									i = o !== t ? o : null
								let a,
									s,
									l = 0,
									c = 0,
									u = 0,
									h = ''
								for (let e = 0; e < n.length; e++) {
									const t = n[e].value
									e === r && ((c = t.length), (l = h.length)),
										null !== i && n[e].node === i && (e <= r ? u++ : (u = 0)),
										(h += t)
								}
								return (
									r === n.length || u > 1
										? ((a = Xt(i || t, 'end') || Yt($t, h)), (s = Yt(a)))
										: ((a = Xt(i, 'start') || Yt(Xt(t, 'start') || $t, h.slice(0, l))),
										  (s = Xt(i, 'end') || Yt(a, h.substr(l, c)))),
									{ css: h, mismatchOffset: l, mismatchLength: c, start: a, end: s }
								)
							})(r, n)
						return (
							(o.rawMessage = e),
							(o.syntax = t ? Kt(t) : '<generic>'),
							(o.css = i),
							(o.mismatchOffset = a),
							(o.mismatchLength = s),
							(o.message =
								e +
								'\n  syntax: ' +
								o.syntax +
								'\n   value: ' +
								(i || '<empty string>') +
								'\n  --------' +
								new Array(o.mismatchOffset + 1).join('-') +
								'^'),
							Object.assign(o, l),
							(o.loc = {
								source: (n && n.loc && n.loc.source) || '<unknown>',
								start: l,
								end: c,
							}),
							o
						)
					},
					en = new Map(),
					tn = new Map(),
					nn = 45,
					rn = function (e) {
						if (en.has(e)) return en.get(e)
						const t = e.toLowerCase()
						let n = en.get(t)
						if (void 0 === n) {
							const e = an(t, 0),
								r = e ? '' : sn(t, 0)
							n = Object.freeze({
								basename: t.substr(r.length),
								name: t,
								prefix: r,
								vendor: r,
								custom: e,
							})
						}
						return en.set(e, n), n
					},
					on = function (e) {
						if (tn.has(e)) return tn.get(e)
						let t = e,
							n = e[0]
						'/' === n
							? (n = '/' === e[1] ? '//' : '/')
							: '_' !== n &&
							  '*' !== n &&
							  '$' !== n &&
							  '#' !== n &&
							  '+' !== n &&
							  '&' !== n &&
							  (n = '')
						const r = an(t, n.length)
						if (!r && ((t = t.toLowerCase()), tn.has(t))) {
							const n = tn.get(t)
							return tn.set(e, n), n
						}
						const o = r ? '' : sn(t, n.length),
							i = t.substr(0, n.length + o.length),
							a = Object.freeze({
								basename: t.substr(i.length),
								name: t.substr(n.length),
								hack: n,
								vendor: o,
								prefix: i,
								custom: r,
							})
						return tn.set(e, a), a
					}
				function an(e, t) {
					return (
						(t = t || 0),
						e.length - t >= 2 && e.charCodeAt(t) === nn && e.charCodeAt(t + 1) === nn
					)
				}
				function sn(e, t) {
					if (
						((t = t || 0),
						e.length - t >= 3 && e.charCodeAt(t) === nn && e.charCodeAt(t + 1) !== nn)
					) {
						const n = e.indexOf('-', t + 2)
						if (-1 !== n) return e.substring(t, n + 1)
					}
					return ''
				}
				const ln = ['initial', 'inherit', 'unset', 'revert', 'revert-layer'],
					cn = 43,
					un = 45,
					hn = !0
				function pn(e, t) {
					return null !== e && e.type === re && e.value.charCodeAt(0) === t
				}
				function dn(e, t, n) {
					for (; null !== e && (e.type === se || e.type === ke); ) e = n(++t)
					return t
				}
				function mn(e, t, n, r) {
					if (!e) return 0
					const o = e.value.charCodeAt(t)
					if (o === cn || o === un) {
						if (n) return 0
						t++
					}
					for (; t < e.value.length; t++) if (!xe(e.value.charCodeAt(t))) return 0
					return r + 1
				}
				function gn(e, t, n) {
					let r = !1,
						o = dn(e, t, n)
					if (null === (e = n(o))) return t
					if (e.type !== oe) {
						if (!pn(e, cn) && !pn(e, un)) return t
						if (
							((r = !0), (o = dn(n(++o), o, n)), null === (e = n(o)) || e.type !== oe)
						)
							return 0
					}
					if (!r) {
						const t = e.value.charCodeAt(0)
						if (t !== cn && t !== un) return 0
					}
					return mn(e, r ? 0 : 1, r, o)
				}
				const fn = 45,
					bn = 63
				function yn(e, t) {
					return null !== e && e.type === re && e.value.charCodeAt(0) === t
				}
				function kn(e, t, n) {
					let r = 0
					for (let o = t; o < e.value.length; o++) {
						const i = e.value.charCodeAt(o)
						if (i === fn && n && 0 !== r) return kn(e, t + r + 1, !1), 6
						if (!we(i)) return 0
						if (++r > 6) return 0
					}
					return r
				}
				function vn(e, t, n) {
					if (!e) return 0
					for (; yn(n(t), bn); ) {
						if (++e > 6) return 0
						t++
					}
					return t
				}
				const xn = ['calc(', '-moz-calc(', '-webkit-calc('],
					wn = new Map([
						[X, fe],
						[ge, fe],
						[de, me],
						[be, ye],
					])
				function Sn(e, t) {
					return t < e.length ? e.charCodeAt(t) : 0
				}
				function Cn(e, t) {
					return Ue(e, 0, e.length, t)
				}
				function zn(e, t) {
					for (let n = 0; n < t.length; n++) if (Cn(e, t[n])) return !0
					return !1
				}
				function An(e, t) {
					return t === e.length - 2 && 92 === Sn(e, t) && xe(Sn(e, t + 1))
				}
				function Ln(e, t, n) {
					if (e && 'Range' === e.type) {
						const r = Number(void 0 !== n && n !== t.length ? t.substr(0, n) : t)
						if (isNaN(r)) return !0
						if (null !== e.min && r < e.min && 'string' != typeof e.min) return !0
						if (null !== e.max && r > e.max && 'string' != typeof e.max) return !0
					}
					return !1
				}
				function Tn(e) {
					return function (t, n, r) {
						return null === t
							? 0
							: t.type === X && zn(t.value, xn)
							? (function (e, t) {
									let n = 0,
										r = [],
										o = 0
									e: do {
										switch (e.type) {
											case ye:
											case fe:
											case me:
												if (e.type !== n) break e
												if (((n = r.pop()), 0 === r.length)) {
													o++
													break e
												}
												break
											case X:
											case ge:
											case de:
											case be:
												r.push(n), (n = wn.get(e.type))
										}
										o++
									} while ((e = t(o)))
									return o
							  })(t, n)
							: e(t, n, r)
					}
				}
				function On(e) {
					return function (t) {
						return null === t || t.type !== e ? 0 : 1
					}
				}
				function Pn(e) {
					return (
						e && (e = new Set(e)),
						function (t, n, r) {
							if (null === t || t.type !== ae) return 0
							const o = Qe(t.value, 0)
							if (null !== e) {
								const n = t.value.indexOf('\\', o),
									r =
										-1 !== n && An(t.value, n)
											? t.value.substring(o, n)
											: t.value.substr(o)
								if (!1 === e.has(r.toLowerCase())) return 0
							}
							return Ln(r, t.value, o) ? 0 : 1
						}
					)
				}
				function En(e) {
					return (
						'function' != typeof e &&
							(e = function () {
								return 0
							}),
						function (t, n, r) {
							return null !== t && t.type === oe && 0 === Number(t.value)
								? 1
								: e(t, n, r)
						}
					)
				}
				const jn = {
						'ident-token': On($),
						'function-token': On(X),
						'at-keyword-token': On(Y),
						'hash-token': On(Z),
						'string-token': On(J),
						'bad-string-token': On(ee),
						'url-token': On(te),
						'bad-url-token': On(ne),
						'delim-token': On(re),
						'number-token': On(oe),
						'percentage-token': On(ie),
						'dimension-token': On(ae),
						'whitespace-token': On(se),
						'CDO-token': On(le),
						'CDC-token': On(ce),
						'colon-token': On(ue),
						'semicolon-token': On(he),
						'comma-token': On(pe),
						'[-token': On(de),
						']-token': On(me),
						'(-token': On(ge),
						')-token': On(fe),
						'{-token': On(be),
						'}-token': On(ye),
					},
					Dn = {
						string: On(J),
						ident: On($),
						percentage: Tn(function (e, t, n) {
							return null === e || e.type !== ie || Ln(n, e.value, e.value.length - 1)
								? 0
								: 1
						}),
						zero: En(),
						number: Tn(function (e, t, n) {
							if (null === e) return 0
							const r = Qe(e.value, 0)
							return r === e.value.length || An(e.value, r)
								? Ln(n, e.value, r)
									? 0
									: 1
								: 0
						}),
						integer: Tn(function (e, t, n) {
							if (null === e || e.type !== oe) return 0
							let r = 43 === Sn(e.value, 0) || 45 === Sn(e.value, 0) ? 1 : 0
							for (; r < e.value.length; r++) if (!xe(Sn(e.value, r))) return 0
							return Ln(n, e.value, r) ? 0 : 1
						}),
						'custom-ident': function (e) {
							if (null === e || e.type !== $) return 0
							const t = e.value.toLowerCase()
							return zn(t, ln) || Cn(t, 'default') ? 0 : 1
						},
						'custom-property-name': function (e) {
							return null === e ||
								e.type !== $ ||
								45 !== Sn(e.value, 0) ||
								45 !== Sn(e.value, 1)
								? 0
								: 1
						},
						'hex-color': function (e) {
							if (null === e || e.type !== Z) return 0
							const t = e.value.length
							if (4 !== t && 5 !== t && 7 !== t && 9 !== t) return 0
							for (let n = 1; n < t; n++) if (!we(Sn(e.value, n))) return 0
							return 1
						},
						'id-selector': function (e) {
							return null === e || e.type !== Z
								? 0
								: Pe(Sn(e.value, 1), Sn(e.value, 2), Sn(e.value, 3))
								? 1
								: 0
						},
						'an-plus-b': function (e, t) {
							let n = 0
							if (!e) return 0
							if (e.type === oe) return mn(e, 0, false, n)
							if (e.type === $ && e.value.charCodeAt(0) === un) {
								if (!Fe(e.value, 1, 110)) return 0
								switch (e.value.length) {
									case 2:
										return gn(t(++n), n, t)
									case 3:
										return e.value.charCodeAt(2) !== un
											? 0
											: ((n = dn(t(++n), n, t)), mn((e = t(n)), 0, hn, n))
									default:
										return e.value.charCodeAt(2) !== un ? 0 : mn(e, 3, hn, n)
								}
							} else if (e.type === $ || (pn(e, cn) && t(n + 1).type === $)) {
								if ((e.type !== $ && (e = t(++n)), null === e || !Fe(e.value, 0, 110)))
									return 0
								switch (e.value.length) {
									case 1:
										return gn(t(++n), n, t)
									case 2:
										return e.value.charCodeAt(1) !== un
											? 0
											: ((n = dn(t(++n), n, t)), mn((e = t(n)), 0, hn, n))
									default:
										return e.value.charCodeAt(1) !== un ? 0 : mn(e, 2, hn, n)
								}
							} else if (e.type === ae) {
								let r = e.value.charCodeAt(0),
									o = r === cn || r === un ? 1 : 0,
									i = o
								for (; i < e.value.length && xe(e.value.charCodeAt(i)); i++);
								return i === o
									? 0
									: Fe(e.value, i, 110)
									? i + 1 === e.value.length
										? gn(t(++n), n, t)
										: e.value.charCodeAt(i + 1) !== un
										? 0
										: i + 2 === e.value.length
										? ((n = dn(t(++n), n, t)), mn((e = t(n)), 0, hn, n))
										: mn(e, i + 2, hn, n)
									: 0
							}
							return 0
						},
						urange: function (e, t) {
							let n = 0
							if (null === e || e.type !== $ || !Fe(e.value, 0, 117)) return 0
							if (null === (e = t(++n))) return 0
							if (yn(e, 43))
								return null === (e = t(++n))
									? 0
									: e.type === $
									? vn(kn(e, 0, !0), ++n, t)
									: yn(e, bn)
									? vn(1, ++n, t)
									: 0
							if (e.type === oe) {
								const r = kn(e, 1, !0)
								return 0 === r
									? 0
									: null === (e = t(++n))
									? n
									: e.type === ae || e.type === oe
									? (function (e, t) {
											return e.value.charCodeAt(0) === t
									  })(e, fn) && kn(e, 1, !1)
										? n + 1
										: 0
									: vn(r, n, t)
							}
							return e.type === ae ? vn(kn(e, 1, !0), ++n, t) : 0
						},
						'declaration-value': function (e, t) {
							if (!e) return 0
							let n = 0,
								r = [],
								o = 0
							e: do {
								switch (e.type) {
									case ee:
									case ne:
										break e
									case ye:
									case fe:
									case me:
										if (e.type !== n) break e
										n = r.pop()
										break
									case he:
										if (0 === n) break e
										break
									case re:
										if (0 === n && '!' === e.value) break e
										break
									case X:
									case ge:
									case de:
									case be:
										r.push(n), (n = wn.get(e.type))
								}
								o++
							} while ((e = t(o)))
							return o
						},
						'any-value': function (e, t) {
							if (!e) return 0
							let n = 0,
								r = [],
								o = 0
							e: do {
								switch (e.type) {
									case ee:
									case ne:
										break e
									case ye:
									case fe:
									case me:
										if (e.type !== n) break e
										n = r.pop()
										break
									case X:
									case ge:
									case de:
									case be:
										r.push(n), (n = wn.get(e.type))
								}
								o++
							} while ((e = t(o)))
							return o
						},
					}
				function In(e) {
					const {
						angle: t,
						decibel: n,
						frequency: r,
						flex: o,
						length: i,
						resolution: a,
						semitones: s,
						time: l,
					} = e || {}
					return {
						dimension: Tn(Pn(null)),
						angle: Tn(Pn(t)),
						decibel: Tn(Pn(n)),
						frequency: Tn(Pn(r)),
						flex: Tn(Pn(o)),
						length: Tn(En(Pn(i))),
						resolution: Tn(Pn(a)),
						semitones: Tn(Pn(s)),
						time: Tn(Pn(l)),
					}
				}
				const Mn = [
						'cm',
						'mm',
						'q',
						'in',
						'pt',
						'pc',
						'px',
						'em',
						'rem',
						'ex',
						'rex',
						'cap',
						'rcap',
						'ch',
						'rch',
						'ic',
						'ric',
						'lh',
						'rlh',
						'vw',
						'svw',
						'lvw',
						'dvw',
						'vh',
						'svh',
						'lvh',
						'dvh',
						'vi',
						'svi',
						'lvi',
						'dvi',
						'vb',
						'svb',
						'lvb',
						'dvb',
						'vmin',
						'svmin',
						'lvmin',
						'dvmin',
						'vmax',
						'svmax',
						'lvmax',
						'dvmax',
						'cqw',
						'cqh',
						'cqi',
						'cqb',
						'cqmin',
						'cqmax',
					],
					Nn = ['deg', 'grad', 'rad', 'turn'],
					_n = ['s', 'ms'],
					Bn = ['hz', 'khz'],
					Rn = ['dpi', 'dpcm', 'dppx', 'x'],
					qn = ['fr'],
					Fn = ['db'],
					Un = ['st']
				function Wn(e, t, n) {
					return Object.assign(ht('SyntaxError', e), {
						input: t,
						offset: n,
						rawMessage: e,
						message:
							e + '\n  ' + t + '\n--' + new Array((n || t.length) + 1).join('-') + '^',
					})
				}
				class Vn {
					constructor(e) {
						;(this.str = e), (this.pos = 0)
					}
					charCodeAt(e) {
						return e < this.str.length ? this.str.charCodeAt(e) : 0
					}
					charCode() {
						return this.charCodeAt(this.pos)
					}
					nextCharCode() {
						return this.charCodeAt(this.pos + 1)
					}
					nextNonWsCode(e) {
						return this.charCodeAt(this.findWsEnd(e))
					}
					findWsEnd(e) {
						for (; e < this.str.length; e++) {
							const t = this.str.charCodeAt(e)
							if (13 !== t && 10 !== t && 12 !== t && 32 !== t && 9 !== t) break
						}
						return e
					}
					substringToPos(e) {
						return this.str.substring(this.pos, (this.pos = e))
					}
					eat(e) {
						this.charCode() !== e &&
							this.error('Expect `' + String.fromCharCode(e) + '`'),
							this.pos++
					}
					peek() {
						return this.pos < this.str.length ? this.str.charAt(this.pos++) : ''
					}
					error(e) {
						throw new Wn(e, this.str, this.pos)
					}
				}
				const Hn = 9,
					Gn = 10,
					Qn = 12,
					Kn = 13,
					$n = 32,
					Xn = 33,
					Yn = 35,
					Zn = 38,
					Jn = 39,
					er = 40,
					tr = 41,
					nr = 42,
					rr = 43,
					or = 44,
					ir = 45,
					ar = 60,
					sr = 62,
					lr = 63,
					cr = 64,
					ur = 91,
					hr = 93,
					pr = 123,
					dr = 124,
					mr = 125,
					gr = 8734,
					fr = new Uint8Array(128).map((e, t) =>
						/[a-zA-Z0-9\-]/.test(String.fromCharCode(t)) ? 1 : 0
					),
					br = { ' ': 1, '&&': 2, '||': 3, '|': 4 }
				function yr(e) {
					return e.substringToPos(e.findWsEnd(e.pos))
				}
				function kr(e) {
					let t = e.pos
					for (; t < e.str.length; t++) {
						const n = e.str.charCodeAt(t)
						if (n >= 128 || 0 === fr[n]) break
					}
					return e.pos === t && e.error('Expect a keyword'), e.substringToPos(t)
				}
				function vr(e) {
					let t = e.pos
					for (; t < e.str.length; t++) {
						const n = e.str.charCodeAt(t)
						if (n < 48 || n > 57) break
					}
					return e.pos === t && e.error('Expect a number'), e.substringToPos(t)
				}
				function xr(e) {
					const t = e.str.indexOf("'", e.pos + 1)
					return (
						-1 === t && ((e.pos = e.str.length), e.error('Expect an apostrophe')),
						e.substringToPos(t + 1)
					)
				}
				function wr(e) {
					let t = null,
						n = null
					return (
						e.eat(pr),
						(t = vr(e)),
						e.charCode() === or
							? (e.pos++, e.charCode() !== mr && (n = vr(e)))
							: (n = t),
						e.eat(mr),
						{ min: Number(t), max: n ? Number(n) : 0 }
					)
				}
				function Sr(e, t) {
					const n = (function (e) {
						let t = null,
							n = !1
						switch (e.charCode()) {
							case nr:
								e.pos++, (t = { min: 0, max: 0 })
								break
							case rr:
								e.pos++, (t = { min: 1, max: 0 })
								break
							case lr:
								e.pos++, (t = { min: 0, max: 1 })
								break
							case Yn:
								e.pos++,
									(n = !0),
									e.charCode() === pr
										? (t = wr(e))
										: e.charCode() === lr
										? (e.pos++, (t = { min: 0, max: 0 }))
										: (t = { min: 1, max: 0 })
								break
							case pr:
								t = wr(e)
								break
							default:
								return null
						}
						return {
							type: 'Multiplier',
							comma: n,
							min: t.min,
							max: t.max,
							term: null,
						}
					})(e)
					return null !== n
						? ((n.term = t),
						  e.charCode() === Yn && e.charCodeAt(e.pos - 1) === rr ? Sr(e, n) : n)
						: t
				}
				function Cr(e) {
					const t = e.peek()
					return '' === t ? null : { type: 'Token', value: t }
				}
				function zr(e, t) {
					function n(e, t) {
						return {
							type: 'Group',
							terms: e,
							combinator: t,
							disallowEmpty: !1,
							explicit: !1,
						}
					}
					let r
					for (t = Object.keys(t).sort((e, t) => br[e] - br[t]); t.length > 0; ) {
						r = t.shift()
						let o = 0,
							i = 0
						for (; o < e.length; o++) {
							const t = e[o]
							'Combinator' === t.type &&
								(t.value === r
									? (-1 === i && (i = o - 1), e.splice(o, 1), o--)
									: (-1 !== i &&
											o - i > 1 &&
											(e.splice(i, o - i, n(e.slice(i, o), r)), (o = i + 1)),
									  (i = -1)))
						}
						;-1 !== i && t.length && e.splice(i, o - i, n(e.slice(i, o), r))
					}
					return r
				}
				function Ar(e) {
					const t = [],
						n = {}
					let r,
						o = null,
						i = e.pos
					for (; (r = Lr(e)); )
						'Spaces' !== r.type &&
							('Combinator' === r.type
								? ((null !== o && 'Combinator' !== o.type) ||
										((e.pos = i), e.error('Unexpected combinator')),
								  (n[r.value] = !0))
								: null !== o &&
								  'Combinator' !== o.type &&
								  ((n[' '] = !0), t.push({ type: 'Combinator', value: ' ' })),
							t.push(r),
							(o = r),
							(i = e.pos))
					return (
						null !== o &&
							'Combinator' === o.type &&
							((e.pos -= i), e.error('Unexpected combinator')),
						{
							type: 'Group',
							terms: t,
							combinator: zr(t, n) || ' ',
							disallowEmpty: !1,
							explicit: !1,
						}
					)
				}
				function Lr(e) {
					let t = e.charCode()
					if (t < 128 && 1 === fr[t])
						return (function (e) {
							const t = kr(e)
							return e.charCode() === er
								? (e.pos++, { type: 'Function', name: t })
								: Sr(e, { type: 'Keyword', name: t })
						})(e)
					switch (t) {
						case hr:
							break
						case ur:
							return Sr(
								e,
								(function (e) {
									let t
									return (
										e.eat(ur),
										(t = Ar(e)),
										e.eat(hr),
										(t.explicit = !0),
										e.charCode() === Xn && (e.pos++, (t.disallowEmpty = !0)),
										t
									)
								})(e)
							)
						case ar:
							return e.nextCharCode() === Jn
								? (function (e) {
										let t
										return (
											e.eat(ar),
											e.eat(Jn),
											(t = kr(e)),
											e.eat(Jn),
											e.eat(sr),
											Sr(e, { type: 'Property', name: t })
										)
								  })(e)
								: (function (e) {
										let t,
											n = null
										return (
											e.eat(ar),
											(t = kr(e)),
											e.charCode() === er &&
												e.nextCharCode() === tr &&
												((e.pos += 2), (t += '()')),
											e.charCodeAt(e.findWsEnd(e.pos)) === ur &&
												(yr(e),
												(n = (function (e) {
													let t = null,
														n = null,
														r = 1
													return (
														e.eat(ur),
														e.charCode() === ir && (e.peek(), (r = -1)),
														-1 == r && e.charCode() === gr
															? e.peek()
															: ((t = r * Number(vr(e))),
															  0 !== fr[e.charCode()] && (t += kr(e))),
														yr(e),
														e.eat(or),
														yr(e),
														e.charCode() === gr
															? e.peek()
															: ((r = 1),
															  e.charCode() === ir && (e.peek(), (r = -1)),
															  (n = r * Number(vr(e))),
															  0 !== fr[e.charCode()] && (n += kr(e))),
														e.eat(hr),
														{ type: 'Range', min: t, max: n }
													)
												})(e))),
											e.eat(sr),
											Sr(e, { type: 'Type', name: t, opts: n })
										)
								  })(e)
						case dr:
							return {
								type: 'Combinator',
								value: e.substringToPos(e.pos + (e.nextCharCode() === dr ? 2 : 1)),
							}
						case Zn:
							return e.pos++, e.eat(Zn), { type: 'Combinator', value: '&&' }
						case or:
							return e.pos++, { type: 'Comma' }
						case Jn:
							return Sr(e, { type: 'String', value: xr(e) })
						case $n:
						case Hn:
						case Gn:
						case Kn:
						case Qn:
							return { type: 'Spaces', value: yr(e) }
						case cr:
							return (
								(t = e.nextCharCode()),
								t < 128 && 1 === fr[t]
									? (e.pos++, { type: 'AtKeyword', name: kr(e) })
									: Cr(e)
							)
						case nr:
						case rr:
						case lr:
						case Yn:
						case Xn:
							break
						case pr:
							if (((t = e.nextCharCode()), t < 48 || t > 57)) return Cr(e)
							break
						default:
							return Cr(e)
					}
				}
				function Tr(e) {
					const t = new Vn(e),
						n = Ar(t)
					return (
						t.pos !== e.length && t.error('Unexpected input'),
						1 === n.terms.length && 'Group' === n.terms[0].type ? n.terms[0] : n
					)
				}
				const Or = function () {}
				const Pr = {
					decorator(e) {
						const t = []
						let n = null
						return {
							...e,
							node(t) {
								const r = n
								;(n = t), e.node.call(this, t), (n = r)
							},
							emit(e, r, o) {
								t.push({ type: r, value: e, node: o ? null : n })
							},
							result: () => t,
						}
					},
				}
				const Er = { type: 'Match' },
					jr = { type: 'Mismatch' },
					Dr = { type: 'DisallowEmpty' },
					Ir = 40,
					Mr = 41
				function Nr(e, t, n) {
					return (t === Er && n === jr) || (e === Er && t === Er && n === Er)
						? e
						: ('If' === e.type &&
								e.else === jr &&
								t === Er &&
								((t = e.then), (e = e.match)),
						  { type: 'If', match: e, then: t, else: n })
				}
				function _r(e) {
					return (
						e.length > 2 &&
						e.charCodeAt(e.length - 2) === Ir &&
						e.charCodeAt(e.length - 1) === Mr
					)
				}
				function Br(e) {
					return (
						'Keyword' === e.type ||
						'AtKeyword' === e.type ||
						'Function' === e.type ||
						('Type' === e.type && _r(e.name))
					)
				}
				function Rr(e, t, n) {
					switch (e) {
						case ' ': {
							let e = Er
							for (let n = t.length - 1; n >= 0; n--) e = Nr(t[n], e, jr)
							return e
						}
						case '|': {
							let e = jr,
								n = null
							for (let r = t.length - 1; r >= 0; r--) {
								let o = t[r]
								if (
									Br(o) &&
									(null === n &&
										r > 0 &&
										Br(t[r - 1]) &&
										((n = Object.create(null)),
										(e = Nr({ type: 'Enum', map: n }, Er, e))),
									null !== n)
								) {
									const e = (_r(o.name) ? o.name.slice(0, -1) : o.name).toLowerCase()
									if (e in n == 0) {
										n[e] = o
										continue
									}
								}
								;(n = null), (e = Nr(o, Er, e))
							}
							return e
						}
						case '&&': {
							if (t.length > 5) return { type: 'MatchOnce', terms: t, all: !0 }
							let n = jr
							for (let r = t.length - 1; r >= 0; r--) {
								const o = t[r]
								let i
								;(i =
									t.length > 1
										? Rr(
												e,
												t.filter(function (e) {
													return e !== o
												}),
												!1
										  )
										: Er),
									(n = Nr(o, i, n))
							}
							return n
						}
						case '||': {
							if (t.length > 5) return { type: 'MatchOnce', terms: t, all: !1 }
							let r = n ? Er : jr
							for (let n = t.length - 1; n >= 0; n--) {
								const o = t[n]
								let i
								;(i =
									t.length > 1
										? Rr(
												e,
												t.filter(function (e) {
													return e !== o
												}),
												!0
										  )
										: Er),
									(r = Nr(o, i, r))
							}
							return r
						}
					}
				}
				function qr(e) {
					if ('function' == typeof e) return { type: 'Generic', fn: e }
					switch (e.type) {
						case 'Group': {
							let t = Rr(e.combinator, e.terms.map(qr), !1)
							return e.disallowEmpty && (t = Nr(t, Dr, jr)), t
						}
						case 'Multiplier':
							return (function (e) {
								let t = Er,
									n = qr(e.term)
								if (0 === e.max)
									(n = Nr(n, Dr, jr)),
										(t = Nr(n, null, jr)),
										(t.then = Nr(Er, Er, t)),
										e.comma && (t.then.else = Nr({ type: 'Comma', syntax: e }, t, jr))
								else
									for (let r = e.min || 1; r <= e.max; r++)
										e.comma && t !== Er && (t = Nr({ type: 'Comma', syntax: e }, t, jr)),
											(t = Nr(n, Nr(Er, Er, t), jr))
								if (0 === e.min) t = Nr(Er, Er, t)
								else
									for (let r = 0; r < e.min - 1; r++)
										e.comma && t !== Er && (t = Nr({ type: 'Comma', syntax: e }, t, jr)),
											(t = Nr(n, t, jr))
								return t
							})(e)
						case 'Type':
						case 'Property':
							return { type: e.type, name: e.name, syntax: e }
						case 'Keyword':
							return { type: e.type, name: e.name.toLowerCase(), syntax: e }
						case 'AtKeyword':
							return { type: e.type, name: '@' + e.name.toLowerCase(), syntax: e }
						case 'Function':
							return { type: e.type, name: e.name.toLowerCase() + '(', syntax: e }
						case 'String':
							return 3 === e.value.length
								? { type: 'Token', value: e.value.charAt(1), syntax: e }
								: {
										type: e.type,
										value: e.value.substr(1, e.value.length - 2).replace(/\\'/g, "'"),
										syntax: e,
								  }
						case 'Token':
							return { type: e.type, value: e.value, syntax: e }
						case 'Comma':
							return { type: e.type, syntax: e }
						default:
							throw new Error('Unknown node type:', e.type)
					}
				}
				function Fr(e, t) {
					return (
						'string' == typeof e && (e = Tr(e)),
						{ type: 'MatchGraph', match: qr(e), syntax: t || null, source: e }
					)
				}
				const { hasOwnProperty: Ur } = Object.prototype,
					Wr = 0,
					Vr = 1,
					Hr = 2,
					Gr = 3,
					Qr = 'Match',
					Kr = 'Mismatch',
					$r =
						'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)',
					Xr = 15e3
				let Yr = 0
				function Zr(e, t) {
					if (e.length !== t.length) return !1
					for (let n = 0; n < e.length; n++) {
						const r = t.charCodeAt(n)
						let o = e.charCodeAt(n)
						if ((o >= 65 && o <= 90 && (o |= 32), o !== r)) return !1
					}
					return !0
				}
				function Jr(e) {
					return (
						null === e ||
						e.type === pe ||
						e.type === X ||
						e.type === ge ||
						e.type === de ||
						e.type === be ||
						(function (e) {
							return e.type === re && '?' !== e.value
						})(e)
					)
				}
				function eo(e) {
					return (
						null === e ||
						e.type === fe ||
						e.type === me ||
						e.type === ye ||
						(e.type === re && '/' === e.value)
					)
				}
				function to(e, t, n) {
					const r = (function (e, t, n) {
						function r() {
							do {
								b++, (f = b < e.length ? e[b] : null)
							} while (null !== f && (f.type === se || f.type === ke))
						}
						function o(t) {
							const n = b + t
							return n < e.length ? e[n] : null
						}
						function i(e, t) {
							return {
								nextState: e,
								matchStack: k,
								syntaxStack: u,
								thenStack: h,
								tokenIndex: b,
								prev: t,
							}
						}
						function a(e) {
							h = { nextState: e, matchStack: k, syntaxStack: u, prev: h }
						}
						function s(e) {
							p = i(e, p)
						}
						function l() {
							;(k = { type: Vr, syntax: t.syntax, token: f, prev: k }),
								r(),
								(d = null),
								b > y && (y = b)
						}
						function c() {
							;(k =
								k.type === Hr
									? k.prev
									: { type: Gr, syntax: u.syntax, token: k.token, prev: k }),
								(u = u.prev)
						}
						let u = null,
							h = null,
							p = null,
							d = null,
							m = 0,
							g = null,
							f = null,
							b = -1,
							y = 0,
							k = { type: Wr, syntax: null, token: null, prev: null }
						for (r(); null === g && ++m < Xr; )
							switch (t.type) {
								case 'Match':
									if (null === h) {
										if (
											null !== f &&
											(b !== e.length - 1 || ('\\0' !== f.value && '\\9' !== f.value))
										) {
											t = jr
											break
										}
										g = Qr
										break
									}
									if ((t = h.nextState) === Dr) {
										if (h.matchStack === k) {
											t = jr
											break
										}
										t = Er
									}
									for (; h.syntaxStack !== u; ) c()
									h = h.prev
									break
								case 'Mismatch':
									if (null !== d && !1 !== d)
										(null === p || b > p.tokenIndex) && ((p = d), (d = !1))
									else if (null === p) {
										g = Kr
										break
									}
									;(t = p.nextState),
										(h = p.thenStack),
										(u = p.syntaxStack),
										(k = p.matchStack),
										(b = p.tokenIndex),
										(f = b < e.length ? e[b] : null),
										(p = p.prev)
									break
								case 'MatchGraph':
									t = t.match
									break
								case 'If':
									t.else !== jr && s(t.else), t.then !== Er && a(t.then), (t = t.match)
									break
								case 'MatchOnce':
									t = { type: 'MatchOnceBuffer', syntax: t, index: 0, mask: 0 }
									break
								case 'MatchOnceBuffer': {
									const e = t.syntax.terms
									if (t.index === e.length) {
										if (0 === t.mask || t.syntax.all) {
											t = jr
											break
										}
										t = Er
										break
									}
									if (t.mask === (1 << e.length) - 1) {
										t = Er
										break
									}
									for (; t.index < e.length; t.index++) {
										const n = 1 << t.index
										if (0 == (t.mask & n)) {
											s(t),
												a({ type: 'AddMatchOnce', syntax: t.syntax, mask: t.mask | n }),
												(t = e[t.index++])
											break
										}
									}
									break
								}
								case 'AddMatchOnce':
									t = {
										type: 'MatchOnceBuffer',
										syntax: t.syntax,
										index: 0,
										mask: t.mask,
									}
									break
								case 'Enum':
									if (null !== f) {
										let e = f.value.toLowerCase()
										if (
											(-1 !== e.indexOf('\\') && (e = e.replace(/\\[09].*$/, '')),
											Ur.call(t.map, e))
										) {
											t = t.map[e]
											break
										}
									}
									t = jr
									break
								case 'Generic': {
									const e = null !== u ? u.opts : null,
										n = b + Math.floor(t.fn(f, o, e))
									if (!isNaN(n) && n > b) {
										for (; b < n; ) l()
										t = Er
									} else t = jr
									break
								}
								case 'Type':
								case 'Property': {
									const e = 'Type' === t.type ? 'types' : 'properties',
										r = Ur.call(n, e) ? n[e][t.name] : null
									if (!r || !r.match)
										throw new Error(
											'Bad syntax reference: ' +
												('Type' === t.type ? '<' + t.name + '>' : "<'" + t.name + "'>")
										)
									if (
										!1 !== d &&
										null !== f &&
										'Type' === t.type &&
										(('custom-ident' === t.name && f.type === $) ||
											('length' === t.name && '0' === f.value))
									) {
										null === d && (d = i(t, p)), (t = jr)
										break
									}
									;(u = {
										syntax: t.syntax,
										opts: t.syntax.opts || (null !== u && u.opts) || null,
										prev: u,
									}),
										(k = { type: Hr, syntax: t.syntax, token: k.token, prev: k }),
										(t = r.match)
									break
								}
								case 'Keyword': {
									const e = t.name
									if (null !== f) {
										let n = f.value
										if (
											(-1 !== n.indexOf('\\') && (n = n.replace(/\\[09].*$/, '')),
											Zr(n, e))
										) {
											l(), (t = Er)
											break
										}
									}
									t = jr
									break
								}
								case 'AtKeyword':
								case 'Function':
									if (null !== f && Zr(f.value, t.name)) {
										l(), (t = Er)
										break
									}
									t = jr
									break
								case 'Token':
									if (null !== f && f.value === t.value) {
										l(), (t = Er)
										break
									}
									t = jr
									break
								case 'Comma':
									null !== f && f.type === pe
										? Jr(k.token)
											? (t = jr)
											: (l(), (t = eo(f) ? jr : Er))
										: (t = Jr(k.token) || eo(f) ? Er : jr)
									break
								case 'String':
									let r = '',
										m = b
									for (; m < e.length && r.length < t.value.length; m++) r += e[m].value
									if (Zr(r, t.value)) {
										for (; b < m; ) l()
										t = Er
									} else t = jr
									break
								default:
									throw new Error('Unknown node type: ' + t.type)
							}
						switch (((Yr += m), g)) {
							case null:
								console.warn('[csstree-match] BREAK after ' + Xr + ' iterations'),
									(g = $r),
									(k = null)
								break
							case Qr:
								for (; null !== u; ) c()
								break
							default:
								k = null
						}
						return { tokens: e, reason: g, iterations: m, match: k, longestMatch: y }
					})(e, t, n || {})
					if (null === r.match) return r
					let o = r.match,
						i = (r.match = { syntax: t.syntax || null, match: [] })
					const a = [i]
					for (
						o = (function (e) {
							let t = null,
								n = null,
								r = e
							for (; null !== r; ) (n = r.prev), (r.prev = t), (t = r), (r = n)
							return t
						})(o).prev;
						null !== o;

					) {
						switch (o.type) {
							case Hr:
								i.match.push((i = { syntax: o.syntax, match: [] })), a.push(i)
								break
							case Gr:
								a.pop(), (i = a[a.length - 1])
								break
							default:
								i.match.push({
									syntax: o.syntax || null,
									token: o.token.value,
									node: o.token.node,
								})
						}
						o = o.prev
					}
					return r
				}
				function no(e) {
					function t(e) {
						return (
							null !== e &&
							('Type' === e.type || 'Property' === e.type || 'Keyword' === e.type)
						)
					}
					let n = null
					return (
						null !== this.matched &&
							(function r(o) {
								if (Array.isArray(o.match)) {
									for (let e = 0; e < o.match.length; e++)
										if (r(o.match[e])) return t(o.syntax) && n.unshift(o.syntax), !0
								} else if (o.node === e) return (n = t(o.syntax) ? [o.syntax] : []), !0
								return !1
							})(this.matched),
						n
					)
				}
				function ro(e, t) {
					return ao(this, e, (e) => 'Type' === e.type && e.name === t)
				}
				function oo(e, t) {
					return ao(this, e, (e) => 'Property' === e.type && e.name === t)
				}
				function io(e) {
					return ao(this, e, (e) => 'Keyword' === e.type)
				}
				function ao(e, t, n) {
					const r = no.call(e, t)
					return null !== r && r.some(n)
				}
				function so(e) {
					return 'node' in e ? e.node : so(e.match[0])
				}
				function lo(e) {
					return 'node' in e ? e.node : lo(e.match[e.match.length - 1])
				}
				function co(e, t, n, r, o) {
					const i = []
					return (
						null !== n.matched &&
							(function n(a) {
								if (null !== a.syntax && a.syntax.type === r && a.syntax.name === o) {
									const n = so(a),
										r = lo(a)
									e.syntax.walk(t, function (e, t, o) {
										if (e === n) {
											const e = new ut()
											do {
												if ((e.appendData(t.data), t.data === r)) break
												t = t.next
											} while (null !== t)
											i.push({ parent: o, nodes: e })
										}
									})
								}
								Array.isArray(a.match) && a.match.forEach(n)
							})(n.matched),
						i
					)
				}
				const { hasOwnProperty: uo } = Object.prototype
				function ho(e) {
					return 'number' == typeof e && isFinite(e) && Math.floor(e) === e && e >= 0
				}
				function po(e) {
					return Boolean(e) && ho(e.offset) && ho(e.line) && ho(e.column)
				}
				function mo(e, t) {
					return function (n, r) {
						if (!n || n.constructor !== Object)
							return r(n, 'Type of node should be an Object')
						for (let o in n) {
							let i = !0
							if (!1 !== uo.call(n, o)) {
								if ('type' === o)
									n.type !== e &&
										r(n, 'Wrong node type `' + n.type + '`, expected `' + e + '`')
								else if ('loc' === o) {
									if (null === n.loc) continue
									if (n.loc && n.loc.constructor === Object)
										if ('string' != typeof n.loc.source) o += '.source'
										else if (po(n.loc.start)) {
											if (po(n.loc.end)) continue
											o += '.end'
										} else o += '.start'
									i = !1
								} else if (t.hasOwnProperty(o)) {
									i = !1
									for (let e = 0; !i && e < t[o].length; e++) {
										const r = t[o][e]
										switch (r) {
											case String:
												i = 'string' == typeof n[o]
												break
											case Boolean:
												i = 'boolean' == typeof n[o]
												break
											case null:
												i = null === n[o]
												break
											default:
												'string' == typeof r
													? (i = n[o] && n[o].type === r)
													: Array.isArray(r) && (i = n[o] instanceof ut)
										}
									}
								} else r(n, 'Unknown field `' + o + '` for ' + e + ' node type')
								i || r(n, 'Bad value for `' + e + '.' + o + '`')
							}
						}
						for (const o in t)
							uo.call(t, o) &&
								!1 === uo.call(n, o) &&
								r(n, 'Field `' + e + '.' + o + '` is missed')
					}
				}
				function go(e, t) {
					const n = t.structure,
						r = { type: String, loc: !0 },
						o = { type: '"' + e + '"' }
					for (const t in n) {
						if (!1 === uo.call(n, t)) continue
						const i = [],
							a = (r[t] = Array.isArray(n[t]) ? n[t].slice() : [n[t]])
						for (let n = 0; n < a.length; n++) {
							const r = a[n]
							if (r === String || r === Boolean) i.push(r.name)
							else if (null === r) i.push('null')
							else if ('string' == typeof r) i.push('<' + r + '>')
							else {
								if (!Array.isArray(r))
									throw new Error(
										'Wrong value `' +
											r +
											'` in `' +
											e +
											'.' +
											t +
											'` structure definition'
									)
								i.push('List')
							}
						}
						o[t] = i.join(' | ')
					}
					return { docs: o, check: mo(e, r) }
				}
				const fo = Fr(ln.join(' | '))
				function bo(e, t, n) {
					const r = {}
					for (const o in e)
						e[o].syntax && (r[o] = n ? e[o].syntax : Kt(e[o].syntax, { compact: t }))
					return r
				}
				function yo(e, t, n) {
					const r = {}
					for (const [o, i] of Object.entries(e))
						r[o] = {
							prelude:
								i.prelude &&
								(n ? i.prelude.syntax : Kt(i.prelude.syntax, { compact: t })),
							descriptors: i.descriptors && bo(i.descriptors, t, n),
						}
					return r
				}
				function ko(e, t, n) {
					return { matched: e, iterations: n, error: t, ...o }
				}
				function vo(e, t, n, r) {
					const o = (function (e, t) {
						return 'string' == typeof e
							? (function (e) {
									const t = []
									return (
										lt(e, (n, r, o) =>
											t.push({ type: n, value: e.slice(r, o), node: null })
										),
										t
									)
							  })(e)
							: t.generate(e, Pr)
					})(n, e.syntax)
					let i
					return (function (e) {
						for (let t = 0; t < e.length; t++)
							if ('var(' === e[t].value.toLowerCase()) return !0
						return !1
					})(o)
						? ko(null, new Error('Matching for a tree with var() is not supported'))
						: (r && (i = to(o, e.cssWideKeywordsSyntax, e)),
						  (r && i.match) || ((i = to(o, t.match, e)), i.match)
								? ko(i.match, null, i.iterations)
								: ko(null, new Jt(i.reason, t.syntax, n, i), i.iterations))
				}
				class xo {
					constructor(e, n, r) {
						if (
							((this.cssWideKeywordsSyntax = fo),
							(this.syntax = n),
							(this.generic = !1),
							(this.units = { ...t }),
							(this.atrules = Object.create(null)),
							(this.properties = Object.create(null)),
							(this.types = Object.create(null)),
							(this.structure =
								r ||
								(function (e) {
									const t = {}
									if (e.node)
										for (const n in e.node)
											if (uo.call(e.node, n)) {
												const r = e.node[n]
												if (!r.structure)
													throw new Error(
														'Missed `structure` field in `' + n + '` node type definition'
													)
												t[n] = go(n, r)
											}
									return t
								})(e)),
							e)
						) {
							if (e.units)
								for (const n of Object.keys(t))
									Array.isArray(e.units[n]) && (this.units[n] = e.units[n])
							if (e.types) for (const t in e.types) this.addType_(t, e.types[t])
							if (e.generic) {
								this.generic = !0
								for (const [e, t] of Object.entries(
									((o = this.units), { ...jn, ...Dn, ...In(o) })
								))
									this.addType_(e, t)
							}
							if (e.atrules)
								for (const t in e.atrules) this.addAtrule_(t, e.atrules[t])
							if (e.properties)
								for (const t in e.properties) this.addProperty_(t, e.properties[t])
						}
						var o
					}
					checkStructure(e) {
						function t(e, t) {
							r.push({ node: e, message: t })
						}
						const n = this.structure,
							r = []
						return (
							this.syntax.walk(e, function (e) {
								n.hasOwnProperty(e.type)
									? n[e.type].check(e, t)
									: t(e, 'Unknown node type `' + e.type + '`')
							}),
							!!r.length && r
						)
					}
					createDescriptor(e, t, n, r = null) {
						const o = { type: t, name: n },
							i = {
								type: t,
								name: n,
								parent: r,
								serializable: 'string' == typeof e || (e && 'string' == typeof e.type),
								syntax: null,
								match: null,
							}
						return (
							'function' == typeof e
								? (i.match = Fr(e, o))
								: ('string' == typeof e
										? Object.defineProperty(i, 'syntax', {
												get: () => (
													Object.defineProperty(i, 'syntax', { value: Tr(e) }), i.syntax
												),
										  })
										: (i.syntax = e),
								  Object.defineProperty(i, 'match', {
										get: () => (
											Object.defineProperty(i, 'match', { value: Fr(i.syntax, o) }),
											i.match
										),
								  })),
							i
						)
					}
					addAtrule_(e, t) {
						t &&
							(this.atrules[e] = {
								type: 'Atrule',
								name: e,
								prelude: t.prelude
									? this.createDescriptor(t.prelude, 'AtrulePrelude', e)
									: null,
								descriptors: t.descriptors
									? Object.keys(t.descriptors).reduce(
											(n, r) => (
												(n[r] = this.createDescriptor(
													t.descriptors[r],
													'AtruleDescriptor',
													r,
													e
												)),
												n
											),
											Object.create(null)
									  )
									: null,
							})
					}
					addProperty_(e, t) {
						t && (this.properties[e] = this.createDescriptor(t, 'Property', e))
					}
					addType_(e, t) {
						t && (this.types[e] = this.createDescriptor(t, 'Type', e))
					}
					checkAtruleName(e) {
						if (!this.getAtrule(e)) return new Zt('Unknown at-rule', '@' + e)
					}
					checkAtrulePrelude(e, t) {
						const n = this.checkAtruleName(e)
						if (n) return n
						const r = this.getAtrule(e)
						return !r.prelude && t
							? new SyntaxError('At-rule `@' + e + '` should not contain a prelude')
							: !r.prelude || t || vo(this, r.prelude, '', !1).matched
							? void 0
							: new SyntaxError('At-rule `@' + e + '` should contain a prelude')
					}
					checkAtruleDescriptorName(e, t) {
						const n = this.checkAtruleName(e)
						if (n) return n
						const r = this.getAtrule(e),
							o = rn(t)
						return r.descriptors
							? r.descriptors[o.name] || r.descriptors[o.basename]
								? void 0
								: new Zt('Unknown at-rule descriptor', t)
							: new SyntaxError('At-rule `@' + e + '` has no known descriptors')
					}
					checkPropertyName(e) {
						if (!this.getProperty(e)) return new Zt('Unknown property', e)
					}
					matchAtrulePrelude(e, t) {
						const n = this.checkAtrulePrelude(e, t)
						if (n) return ko(null, n)
						const r = this.getAtrule(e)
						return r.prelude ? vo(this, r.prelude, t || '', !1) : ko(null, null)
					}
					matchAtruleDescriptor(e, t, n) {
						const r = this.checkAtruleDescriptorName(e, t)
						if (r) return ko(null, r)
						const o = this.getAtrule(e),
							i = rn(t)
						return vo(this, o.descriptors[i.name] || o.descriptors[i.basename], n, !1)
					}
					matchDeclaration(e) {
						return 'Declaration' !== e.type
							? ko(null, new Error('Not a Declaration node'))
							: this.matchProperty(e.property, e.value)
					}
					matchProperty(e, t) {
						if (on(e).custom)
							return ko(
								null,
								new Error("Lexer matching doesn't applicable for custom properties")
							)
						const n = this.checkPropertyName(e)
						return n ? ko(null, n) : vo(this, this.getProperty(e), t, !0)
					}
					matchType(e, t) {
						const n = this.getType(e)
						return n ? vo(this, n, t, !1) : ko(null, new Zt('Unknown type', e))
					}
					match(e, t) {
						return 'string' == typeof e || (e && e.type)
							? (('string' != typeof e && e.match) ||
									(e = this.createDescriptor(e, 'Type', 'anonymous')),
							  vo(this, e, t, !1))
							: ko(null, new Zt('Bad syntax'))
					}
					findValueFragments(e, t, n, r) {
						return co(this, t, this.matchProperty(e, t), n, r)
					}
					findDeclarationValueFragments(e, t, n) {
						return co(this, e.value, this.matchDeclaration(e), t, n)
					}
					findAllFragments(e, t, n) {
						const r = []
						return (
							this.syntax.walk(e, {
								visit: 'Declaration',
								enter: (e) => {
									r.push.apply(r, this.findDeclarationValueFragments(e, t, n))
								},
							}),
							r
						)
					}
					getAtrule(e, t = !0) {
						const n = rn(e)
						return (
							(n.vendor && t
								? this.atrules[n.name] || this.atrules[n.basename]
								: this.atrules[n.name]) || null
						)
					}
					getAtrulePrelude(e, t = !0) {
						const n = this.getAtrule(e, t)
						return (n && n.prelude) || null
					}
					getAtruleDescriptor(e, t) {
						return (
							(this.atrules.hasOwnProperty(e) &&
								this.atrules.declarators &&
								this.atrules[e].declarators[t]) ||
							null
						)
					}
					getProperty(e, t = !0) {
						const n = on(e)
						return (
							(n.vendor && t
								? this.properties[n.name] || this.properties[n.basename]
								: this.properties[n.name]) || null
						)
					}
					getType(e) {
						return hasOwnProperty.call(this.types, e) ? this.types[e] : null
					}
					validate() {
						function e(r, o, i, a) {
							if (i.has(o)) return i.get(o)
							i.set(o, !1),
								null !== a.syntax &&
									(function (e, t, n) {
										let r = Or,
											o = Or
										if (((r = t), r === Or && o === Or))
											throw new Error(
												"Neither `enter` nor `leave` walker handler is set or both aren't a function"
											)
										!(function e(t) {
											switch ((r.call(n, t), t.type)) {
												case 'Group':
													t.terms.forEach(e)
													break
												case 'Multiplier':
													e(t.term)
													break
												case 'Type':
												case 'Property':
												case 'Keyword':
												case 'AtKeyword':
												case 'Function':
												case 'String':
												case 'Token':
												case 'Comma':
													break
												default:
													throw new Error('Unknown type: ' + t.type)
											}
											o.call(n, t)
										})(e)
									})(
										a.syntax,
										function (a) {
											if ('Type' !== a.type && 'Property' !== a.type) return
											const s = 'Type' === a.type ? r.types : r.properties,
												l = 'Type' === a.type ? t : n
											;(hasOwnProperty.call(s, a.name) && !e(r, a.name, l, s[a.name])) ||
												i.set(o, !0)
										},
										this
									)
						}
						let t = new Map(),
							n = new Map()
						for (const n in this.types) e(this, n, t, this.types[n])
						for (const t in this.properties) e(this, t, n, this.properties[t])
						return (
							(t = [...t.keys()].filter((e) => t.get(e))),
							(n = [...n.keys()].filter((e) => n.get(e))),
							t.length || n.length ? { types: t, properties: n } : null
						)
					}
					dump(e, t) {
						return {
							generic: this.generic,
							units: this.units,
							types: bo(this.types, !t, e),
							properties: bo(this.properties, !t, e),
							atrules: yo(this.atrules, !t, e),
						}
					}
					toString() {
						return JSON.stringify(this.dump())
					}
				}
				function wo(e, t) {
					return 'string' == typeof t && /^\s*\|/.test(t)
						? 'string' == typeof e
							? e + t
							: t.replace(/^\s*\|\s*/, '')
						: t || null
				}
				function So(e, t) {
					const n = Object.create(null)
					for (const [r, o] of Object.entries(e))
						if (o) {
							n[r] = {}
							for (const e of Object.keys(o)) t.includes(e) && (n[r][e] = o[e])
						}
					return n
				}
				function Co(e, t) {
					const n = { ...e }
					for (const [r, o] of Object.entries(t))
						switch (r) {
							case 'generic':
								n[r] = Boolean(o)
								break
							case 'units':
								n[r] = { ...e[r] }
								for (const [e, t] of Object.entries(o))
									n[r][e] = Array.isArray(t) ? t : []
								break
							case 'atrules':
								n[r] = { ...e[r] }
								for (const [e, t] of Object.entries(o)) {
									const o = n[r][e] || {},
										i = (n[r][e] = {
											prelude: o.prelude || null,
											descriptors: { ...o.descriptors },
										})
									if (t) {
										i.prelude = t.prelude ? wo(i.prelude, t.prelude) : i.prelude || null
										for (const [e, n] of Object.entries(t.descriptors || {}))
											i.descriptors[e] = n ? wo(i.descriptors[e], n) : null
										Object.keys(i.descriptors).length || (i.descriptors = null)
									}
								}
								break
							case 'types':
							case 'properties':
								n[r] = { ...e[r] }
								for (const [e, t] of Object.entries(o)) n[r][e] = wo(n[r][e], t)
								break
							case 'scope':
								n[r] = { ...e[r] }
								for (const [e, t] of Object.entries(o)) n[r][e] = { ...n[r][e], ...t }
								break
							case 'parseContext':
								n[r] = { ...e[r], ...o }
								break
							case 'atrule':
							case 'pseudo':
								n[r] = { ...e[r], ...So(o, ['parse']) }
								break
							case 'node':
								n[r] = {
									...e[r],
									...So(o, ['name', 'structure', 'parse', 'generate', 'walkContext']),
								}
						}
					return n
				}
				const zo = 43,
					Ao = 45,
					Lo = 110,
					To = !0,
					Oo = !1
				function Po(e, t) {
					let n = this.tokenStart + e
					const r = this.charCodeAt(n)
					for (
						(r !== zo && r !== Ao) ||
						(t && this.error('Number sign is not allowed'), n++);
						n < this.tokenEnd;
						n++
					)
						xe(this.charCodeAt(n)) || this.error('Integer is expected', n)
				}
				function Eo(e) {
					return Po.call(this, 0, e)
				}
				function jo(e, t) {
					if (!this.cmpChar(this.tokenStart + e, t)) {
						let n = ''
						switch (t) {
							case Lo:
								n = 'N is expected'
								break
							case Ao:
								n = 'HyphenMinus is expected'
						}
						this.error(n, this.tokenStart + e)
					}
				}
				function Do() {
					let e = 0,
						t = 0,
						n = this.tokenType
					for (; n === se || n === ke; ) n = this.lookupType(++e)
					if (n !== oe) {
						if (!this.isDelim(zo, e) && !this.isDelim(Ao, e)) return null
						t = this.isDelim(zo, e) ? zo : Ao
						do {
							n = this.lookupType(++e)
						} while (n === se || n === ke)
						n !== oe && (this.skip(e), Eo.call(this, To))
					}
					return (
						e > 0 && this.skip(e),
						0 === t &&
							((n = this.charCodeAt(this.tokenStart)),
							n !== zo && n !== Ao && this.error('Number sign is expected')),
						Eo.call(this, 0 !== t),
						t === Ao ? '-' + this.consume(oe) : this.consume(oe)
					)
				}
				const Io = 'AnPlusB',
					Mo = { a: [String, null], b: [String, null] }
				function No() {
					const e = this.tokenStart
					let t = null,
						n = null
					if (this.tokenType === oe) Eo.call(this, Oo), (n = this.consume(oe))
					else if (this.tokenType === $ && this.cmpChar(this.tokenStart, Ao))
						switch (
							((t = '-1'), jo.call(this, 1, Lo), this.tokenEnd - this.tokenStart)
						) {
							case 2:
								this.next(), (n = Do.call(this))
								break
							case 3:
								jo.call(this, 2, Ao),
									this.next(),
									this.skipSC(),
									Eo.call(this, To),
									(n = '-' + this.consume(oe))
								break
							default:
								jo.call(this, 2, Ao),
									Po.call(this, 3, To),
									this.next(),
									(n = this.substrToCursor(e + 2))
						}
					else if (
						this.tokenType === $ ||
						(this.isDelim(zo) && this.lookupType(1) === $)
					) {
						let r = 0
						switch (
							((t = '1'),
							this.isDelim(zo) && ((r = 1), this.next()),
							jo.call(this, 0, Lo),
							this.tokenEnd - this.tokenStart)
						) {
							case 1:
								this.next(), (n = Do.call(this))
								break
							case 2:
								jo.call(this, 1, Ao),
									this.next(),
									this.skipSC(),
									Eo.call(this, To),
									(n = '-' + this.consume(oe))
								break
							default:
								jo.call(this, 1, Ao),
									Po.call(this, 2, To),
									this.next(),
									(n = this.substrToCursor(e + r + 1))
						}
					} else if (this.tokenType === ae) {
						const r = this.charCodeAt(this.tokenStart),
							o = r === zo || r === Ao
						let i = this.tokenStart + o
						for (; i < this.tokenEnd && xe(this.charCodeAt(i)); i++);
						i === this.tokenStart + o &&
							this.error('Integer is expected', this.tokenStart + o),
							jo.call(this, i - this.tokenStart, Lo),
							(t = this.substring(e, i)),
							i + 1 === this.tokenEnd
								? (this.next(), (n = Do.call(this)))
								: (jo.call(this, i - this.tokenStart + 1, Ao),
								  i + 2 === this.tokenEnd
										? (this.next(),
										  this.skipSC(),
										  Eo.call(this, To),
										  (n = '-' + this.consume(oe)))
										: (Po.call(this, i - this.tokenStart + 2, To),
										  this.next(),
										  (n = this.substrToCursor(i + 1))))
					} else this.error()
					return (
						null !== t && t.charCodeAt(0) === zo && (t = t.substr(1)),
						null !== n && n.charCodeAt(0) === zo && (n = n.substr(1)),
						{ type: 'AnPlusB', loc: this.getLocation(e, this.tokenStart), a: t, b: n }
					)
				}
				function _o(e) {
					if (e.a) {
						const t =
							('+1' === e.a || '1' === e.a ? 'n' : '-1' === e.a && '-n') || e.a + 'n'
						if (e.b) {
							const n = '-' === e.b[0] || '+' === e.b[0] ? e.b : '+' + e.b
							this.tokenize(t + n)
						} else this.tokenize(t)
					} else this.tokenize(e.b)
				}
				function Bo(e) {
					return this.Raw(e, this.consumeUntilLeftCurlyBracketOrSemicolon, !0)
				}
				function Ro() {
					for (let e, t = 1; (e = this.lookupType(t)); t++) {
						if (e === ye) return !0
						if (e === be || e === Y) return !1
					}
					return !1
				}
				const qo = 'Atrule',
					Fo = 'atrule',
					Uo = {
						name: String,
						prelude: ['AtrulePrelude', 'Raw', null],
						block: ['Block', null],
					}
				function Wo(e = !1) {
					const t = this.tokenStart
					let n,
						r,
						o = null,
						i = null
					switch (
						(this.eat(Y),
						(n = this.substrToCursor(t + 1)),
						(r = n.toLowerCase()),
						this.skipSC(),
						!1 === this.eof &&
							this.tokenType !== be &&
							this.tokenType !== he &&
							((o = this.parseAtrulePrelude
								? this.parseWithFallback(this.AtrulePrelude.bind(this, n, e), Bo)
								: Bo.call(this, this.tokenIndex)),
							this.skipSC()),
						this.tokenType)
					) {
						case he:
							this.next()
							break
						case be:
							i =
								hasOwnProperty.call(this.atrule, r) &&
								'function' == typeof this.atrule[r].block
									? this.atrule[r].block.call(this, e)
									: this.Block(Ro.call(this))
					}
					return {
						type: 'Atrule',
						loc: this.getLocation(t, this.tokenStart),
						name: n,
						prelude: o,
						block: i,
					}
				}
				function Vo(e) {
					this.token(Y, '@' + e.name),
						null !== e.prelude && this.node(e.prelude),
						e.block ? this.node(e.block) : this.token(he, ';')
				}
				const Ho = 'AtrulePrelude',
					Go = 'atrulePrelude',
					Qo = { children: [[]] }
				function Ko(e) {
					let t = null
					return (
						null !== e && (e = e.toLowerCase()),
						this.skipSC(),
						(t =
							hasOwnProperty.call(this.atrule, e) &&
							'function' == typeof this.atrule[e].prelude
								? this.atrule[e].prelude.call(this)
								: this.readSequence(this.scope.AtrulePrelude)),
						this.skipSC(),
						!0 !== this.eof &&
							this.tokenType !== be &&
							this.tokenType !== he &&
							this.error('Semicolon or block is expected'),
						{ type: 'AtrulePrelude', loc: this.getLocationFromList(t), children: t }
					)
				}
				function $o(e) {
					this.children(e)
				}
				const Xo = 36,
					Yo = 42,
					Zo = 61,
					Jo = 94,
					ei = 124,
					ti = 126
				function ni() {
					this.eof && this.error('Unexpected end of input')
					const e = this.tokenStart
					let t = !1
					return (
						this.isDelim(Yo)
							? ((t = !0), this.next())
							: this.isDelim(ei) || this.eat($),
						this.isDelim(ei)
							? this.charCodeAt(this.tokenStart + 1) !== Zo
								? (this.next(), this.eat($))
								: t && this.error('Identifier is expected', this.tokenEnd)
							: t && this.error('Vertical line is expected'),
						{
							type: 'Identifier',
							loc: this.getLocation(e, this.tokenStart),
							name: this.substrToCursor(e),
						}
					)
				}
				function ri() {
					const e = this.tokenStart,
						t = this.charCodeAt(e)
					return (
						t !== Zo &&
							t !== ti &&
							t !== Jo &&
							t !== Xo &&
							t !== Yo &&
							t !== ei &&
							this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected'),
						this.next(),
						t !== Zo &&
							(this.isDelim(Zo) || this.error('Equal sign is expected'), this.next()),
						this.substrToCursor(e)
					)
				}
				const oi = 'AttributeSelector',
					ii = {
						name: 'Identifier',
						matcher: [String, null],
						value: ['String', 'Identifier', null],
						flags: [String, null],
					}
				function ai() {
					const e = this.tokenStart
					let t,
						n = null,
						r = null,
						o = null
					return (
						this.eat(de),
						this.skipSC(),
						(t = ni.call(this)),
						this.skipSC(),
						this.tokenType !== me &&
							(this.tokenType !== $ &&
								((n = ri.call(this)),
								this.skipSC(),
								(r = this.tokenType === J ? this.String() : this.Identifier()),
								this.skipSC()),
							this.tokenType === $ && ((o = this.consume($)), this.skipSC())),
						this.eat(me),
						{
							type: 'AttributeSelector',
							loc: this.getLocation(e, this.tokenStart),
							name: t,
							matcher: n,
							value: r,
							flags: o,
						}
					)
				}
				function si(e) {
					this.token(re, '['),
						this.node(e.name),
						null !== e.matcher && (this.tokenize(e.matcher), this.node(e.value)),
						null !== e.flags && this.token($, e.flags),
						this.token(re, ']')
				}
				const li = 38
				function ci(e) {
					return this.Raw(e, null, !0)
				}
				function ui() {
					return this.parseWithFallback(this.Rule, ci)
				}
				function hi(e) {
					return this.Raw(e, this.consumeUntilSemicolonIncluded, !0)
				}
				function pi() {
					if (this.tokenType === he) return hi.call(this, this.tokenIndex)
					const e = this.parseWithFallback(this.Declaration, hi)
					return this.tokenType === he && this.next(), e
				}
				const di = 'Block',
					mi = 'block',
					gi = { children: [['Atrule', 'Rule', 'Declaration']] }
				function fi(e) {
					const t = e ? pi : ui,
						n = this.tokenStart
					let r = this.createList()
					this.eat(be)
					e: for (; !this.eof; )
						switch (this.tokenType) {
							case ye:
								break e
							case se:
							case ke:
								this.next()
								break
							case Y:
								r.push(this.parseWithFallback(this.Atrule.bind(this, e), ci))
								break
							default:
								e && this.isDelim(li) ? r.push(ui.call(this)) : r.push(t.call(this))
						}
					return (
						this.eof || this.eat(ye),
						{ type: 'Block', loc: this.getLocation(n, this.tokenStart), children: r }
					)
				}
				function bi(e) {
					this.token(be, '{'),
						this.children(e, (e) => {
							'Declaration' === e.type && this.token(he, ';')
						}),
						this.token(ye, '}')
				}
				const yi = 'Brackets',
					ki = { children: [[]] }
				function vi(e, t) {
					const n = this.tokenStart
					let r = null
					return (
						this.eat(de),
						(r = e.call(this, t)),
						this.eof || this.eat(me),
						{
							type: 'Brackets',
							loc: this.getLocation(n, this.tokenStart),
							children: r,
						}
					)
				}
				function xi(e) {
					this.token(re, '['), this.children(e), this.token(re, ']')
				}
				const wi = 'CDC',
					Si = []
				function Ci() {
					const e = this.tokenStart
					return (
						this.eat(ce), { type: 'CDC', loc: this.getLocation(e, this.tokenStart) }
					)
				}
				function zi() {
					this.token(ce, '--\x3e')
				}
				const Ai = 'CDO',
					Li = []
				function Ti() {
					const e = this.tokenStart
					return (
						this.eat(le), { type: 'CDO', loc: this.getLocation(e, this.tokenStart) }
					)
				}
				function Oi() {
					this.token(le, '\x3c!--')
				}
				const Pi = 46,
					Ei = 'ClassSelector',
					ji = { name: String }
				function Di() {
					return (
						this.eatDelim(Pi),
						{
							type: 'ClassSelector',
							loc: this.getLocation(this.tokenStart - 1, this.tokenEnd),
							name: this.consume($),
						}
					)
				}
				function Ii(e) {
					this.token(re, '.'), this.token($, e.name)
				}
				const Mi = 43,
					Ni = 47,
					_i = 62,
					Bi = 126,
					Ri = 'Combinator',
					qi = { name: String }
				function Fi() {
					const e = this.tokenStart
					let t
					switch (this.tokenType) {
						case se:
							t = ' '
							break
						case re:
							switch (this.charCodeAt(this.tokenStart)) {
								case _i:
								case Mi:
								case Bi:
									this.next()
									break
								case Ni:
									this.next(), this.eatIdent('deep'), this.eatDelim(Ni)
									break
								default:
									this.error('Combinator is expected')
							}
							t = this.substrToCursor(e)
					}
					return {
						type: 'Combinator',
						loc: this.getLocation(e, this.tokenStart),
						name: t,
					}
				}
				function Ui(e) {
					this.tokenize(e.name)
				}
				const Wi = 42,
					Vi = 47,
					Hi = 'Comment',
					Gi = { value: String }
				function Qi() {
					const e = this.tokenStart
					let t = this.tokenEnd
					return (
						this.eat(ke),
						t - e + 2 >= 2 &&
							this.charCodeAt(t - 2) === Wi &&
							this.charCodeAt(t - 1) === Vi &&
							(t -= 2),
						{
							type: 'Comment',
							loc: this.getLocation(e, this.tokenStart),
							value: this.substring(e + 2, t),
						}
					)
				}
				function Ki(e) {
					this.token(ke, '/*' + e.value + '*/')
				}
				const $i = 33,
					Xi = 35,
					Yi = 36,
					Zi = 38,
					Ji = 42,
					ea = 43,
					ta = 47
				function na(e) {
					return this.Raw(e, this.consumeUntilExclamationMarkOrSemicolon, !0)
				}
				function ra(e) {
					return this.Raw(e, this.consumeUntilExclamationMarkOrSemicolon, !1)
				}
				function oa() {
					const e = this.tokenIndex,
						t = this.Value()
					return (
						'Raw' !== t.type &&
							!1 === this.eof &&
							this.tokenType !== he &&
							!1 === this.isDelim($i) &&
							!1 === this.isBalanceEdge(e) &&
							this.error(),
						t
					)
				}
				const ia = 'Declaration',
					aa = 'declaration',
					sa = {
						important: [Boolean, String],
						property: String,
						value: ['Value', 'Raw'],
					}
				function la() {
					const e = this.tokenStart,
						t = this.tokenIndex,
						n = ua.call(this),
						r = an(n),
						o = r ? this.parseCustomProperty : this.parseValue,
						i = r ? ra : na
					let a,
						s = !1
					this.skipSC(), this.eat(ue)
					const l = this.tokenIndex
					if (
						(r || this.skipSC(),
						(a = o ? this.parseWithFallback(oa, i) : i.call(this, this.tokenIndex)),
						r && 'Value' === a.type && a.children.isEmpty)
					)
						for (let e = l - this.tokenIndex; e <= 0; e++)
							if (this.lookupType(e) === se) {
								a.children.appendData({ type: 'WhiteSpace', loc: null, value: ' ' })
								break
							}
					return (
						this.isDelim($i) && ((s = ha.call(this)), this.skipSC()),
						!1 === this.eof &&
							this.tokenType !== he &&
							!1 === this.isBalanceEdge(t) &&
							this.error(),
						{
							type: 'Declaration',
							loc: this.getLocation(e, this.tokenStart),
							important: s,
							property: n,
							value: a,
						}
					)
				}
				function ca(e) {
					this.token($, e.property),
						this.token(ue, ':'),
						this.node(e.value),
						e.important &&
							(this.token(re, '!'),
							this.token($, !0 === e.important ? 'important' : e.important))
				}
				function ua() {
					const e = this.tokenStart
					if (this.tokenType === re)
						switch (this.charCodeAt(this.tokenStart)) {
							case Ji:
							case Yi:
							case ea:
							case Xi:
							case Zi:
								this.next()
								break
							case ta:
								this.next(), this.isDelim(ta) && this.next()
						}
					return (
						this.tokenType === Z ? this.eat(Z) : this.eat($), this.substrToCursor(e)
					)
				}
				function ha() {
					this.eat(re), this.skipSC()
					const e = this.consume($)
					return 'important' === e || e
				}
				const pa = 38
				function da(e) {
					return this.Raw(e, this.consumeUntilSemicolonIncluded, !0)
				}
				const ma = 'DeclarationList',
					ga = { children: [['Declaration', 'Atrule', 'Rule']] }
				function fa() {
					const e = this.createList()
					for (; !this.eof; )
						switch (this.tokenType) {
							case se:
							case ke:
							case he:
								this.next()
								break
							case Y:
								e.push(this.parseWithFallback(this.Atrule.bind(this, !0), da))
								break
							default:
								this.isDelim(pa)
									? e.push(this.parseWithFallback(this.Rule, da))
									: e.push(this.parseWithFallback(this.Declaration, da))
						}
					return {
						type: 'DeclarationList',
						loc: this.getLocationFromList(e),
						children: e,
					}
				}
				function ba(e) {
					this.children(e, (e) => {
						'Declaration' === e.type && this.token(he, ';')
					})
				}
				const ya = 'Dimension',
					ka = { value: String, unit: String }
				function va() {
					const e = this.tokenStart,
						t = this.consumeNumber(ae)
					return {
						type: 'Dimension',
						loc: this.getLocation(e, this.tokenStart),
						value: t,
						unit: this.substring(e + t.length, this.tokenStart),
					}
				}
				function xa(e) {
					this.token(ae, e.value + e.unit)
				}
				const wa = 'Function',
					Sa = 'function',
					Ca = { name: String, children: [[]] }
				function za(e, t) {
					const n = this.tokenStart,
						r = this.consumeFunctionName(),
						o = r.toLowerCase()
					let i
					return (
						(i = t.hasOwnProperty(o) ? t[o].call(this, t) : e.call(this, t)),
						this.eof || this.eat(fe),
						{
							type: 'Function',
							loc: this.getLocation(n, this.tokenStart),
							name: r,
							children: i,
						}
					)
				}
				function Aa(e) {
					this.token(X, e.name + '('), this.children(e), this.token(fe, ')')
				}
				const La = 'XXX',
					Ta = 'Hash',
					Oa = { value: String }
				function Pa() {
					const e = this.tokenStart
					return (
						this.eat(Z),
						{
							type: 'Hash',
							loc: this.getLocation(e, this.tokenStart),
							value: this.substrToCursor(e + 1),
						}
					)
				}
				function Ea(e) {
					this.token(Z, '#' + e.value)
				}
				const ja = 'Identifier',
					Da = { name: String }
				function Ia() {
					return {
						type: 'Identifier',
						loc: this.getLocation(this.tokenStart, this.tokenEnd),
						name: this.consume($),
					}
				}
				function Ma(e) {
					this.token($, e.name)
				}
				const Na = 'IdSelector',
					_a = { name: String }
				function Ba() {
					const e = this.tokenStart
					return (
						this.eat(Z),
						{
							type: 'IdSelector',
							loc: this.getLocation(e, this.tokenStart),
							name: this.substrToCursor(e + 1),
						}
					)
				}
				function Ra(e) {
					this.token(re, '#' + e.name)
				}
				const qa = 'MediaFeature',
					Fa = {
						name: String,
						value: ['Identifier', 'Number', 'Dimension', 'Ratio', null],
					}
				function Ua() {
					const e = this.tokenStart
					let t,
						n = null
					if (
						(this.eat(ge),
						this.skipSC(),
						(t = this.consume($)),
						this.skipSC(),
						this.tokenType !== fe)
					) {
						switch ((this.eat(ue), this.skipSC(), this.tokenType)) {
							case oe:
								n = this.lookupNonWSType(1) === re ? this.Ratio() : this.Number()
								break
							case ae:
								n = this.Dimension()
								break
							case $:
								n = this.Identifier()
								break
							default:
								this.error('Number, dimension, ratio or identifier is expected')
						}
						this.skipSC()
					}
					return (
						this.eat(fe),
						{
							type: 'MediaFeature',
							loc: this.getLocation(e, this.tokenStart),
							name: t,
							value: n,
						}
					)
				}
				function Wa(e) {
					this.token(ge, '('),
						this.token($, e.name),
						null !== e.value && (this.token(ue, ':'), this.node(e.value)),
						this.token(fe, ')')
				}
				const Va = 'MediaQuery',
					Ha = { children: [['Identifier', 'MediaFeature', 'WhiteSpace']] }
				function Ga() {
					const e = this.createList()
					let t = null
					this.skipSC()
					e: for (; !this.eof; ) {
						switch (this.tokenType) {
							case ke:
							case se:
								this.next()
								continue
							case $:
								t = this.Identifier()
								break
							case ge:
								t = this.MediaFeature()
								break
							default:
								break e
						}
						e.push(t)
					}
					return (
						null === t && this.error('Identifier or parenthesis is expected'),
						{ type: 'MediaQuery', loc: this.getLocationFromList(e), children: e }
					)
				}
				function Qa(e) {
					this.children(e)
				}
				const Ka = 'MediaQueryList',
					$a = { children: [['MediaQuery']] }
				function Xa() {
					const e = this.createList()
					for (
						this.skipSC();
						!this.eof && (e.push(this.MediaQuery()), this.tokenType === pe);

					)
						this.next()
					return {
						type: 'MediaQueryList',
						loc: this.getLocationFromList(e),
						children: e,
					}
				}
				function Ya(e) {
					this.children(e, () => this.token(pe, ','))
				}
				const Za = 38,
					Ja = 'NestingSelector',
					es = {}
				function ts() {
					const e = this.tokenStart
					return (
						this.eatDelim(Za),
						{ type: 'NestingSelector', loc: this.getLocation(e, this.tokenStart) }
					)
				}
				function ns() {
					this.token(re, '&')
				}
				const rs = 'Nth',
					os = { nth: ['AnPlusB', 'Identifier'], selector: ['SelectorList', null] }
				function is() {
					this.skipSC()
					const e = this.tokenStart
					let t,
						n = e,
						r = null
					return (
						(t =
							this.lookupValue(0, 'odd') || this.lookupValue(0, 'even')
								? this.Identifier()
								: this.AnPlusB()),
						(n = this.tokenStart),
						this.skipSC(),
						this.lookupValue(0, 'of') &&
							(this.next(), (r = this.SelectorList()), (n = this.tokenStart)),
						{ type: 'Nth', loc: this.getLocation(e, n), nth: t, selector: r }
					)
				}
				function as(e) {
					this.node(e.nth),
						null !== e.selector && (this.token($, 'of'), this.node(e.selector))
				}
				const ss = 'Number',
					ls = { value: String }
				function cs() {
					return {
						type: 'Number',
						loc: this.getLocation(this.tokenStart, this.tokenEnd),
						value: this.consume(oe),
					}
				}
				function us(e) {
					this.token(oe, e.value)
				}
				const hs = 'Operator',
					ps = { value: String }
				function ds() {
					const e = this.tokenStart
					return (
						this.next(),
						{
							type: 'Operator',
							loc: this.getLocation(e, this.tokenStart),
							value: this.substrToCursor(e),
						}
					)
				}
				function ms(e) {
					this.tokenize(e.value)
				}
				const gs = 'Parentheses',
					fs = { children: [[]] }
				function bs(e, t) {
					const n = this.tokenStart
					let r = null
					return (
						this.eat(ge),
						(r = e.call(this, t)),
						this.eof || this.eat(fe),
						{
							type: 'Parentheses',
							loc: this.getLocation(n, this.tokenStart),
							children: r,
						}
					)
				}
				function ys(e) {
					this.token(ge, '('), this.children(e), this.token(fe, ')')
				}
				const ks = 'Percentage',
					vs = { value: String }
				function xs() {
					return {
						type: 'Percentage',
						loc: this.getLocation(this.tokenStart, this.tokenEnd),
						value: this.consumeNumber(ie),
					}
				}
				function ws(e) {
					this.token(ie, e.value + '%')
				}
				const Ss = 'PseudoClassSelector',
					Cs = 'function',
					zs = { name: String, children: [['Raw'], null] }
				function As() {
					const e = this.tokenStart
					let t,
						n,
						r = null
					return (
						this.eat(ue),
						this.tokenType === X
							? ((t = this.consumeFunctionName()),
							  (n = t.toLowerCase()),
							  hasOwnProperty.call(this.pseudo, n)
									? (this.skipSC(), (r = this.pseudo[n].call(this)), this.skipSC())
									: ((r = this.createList()),
									  r.push(this.Raw(this.tokenIndex, null, !1))),
							  this.eat(fe))
							: (t = this.consume($)),
						{
							type: 'PseudoClassSelector',
							loc: this.getLocation(e, this.tokenStart),
							name: t,
							children: r,
						}
					)
				}
				function Ls(e) {
					this.token(ue, ':'),
						null === e.children
							? this.token($, e.name)
							: (this.token(X, e.name + '('), this.children(e), this.token(fe, ')'))
				}
				const Ts = 'PseudoElementSelector',
					Os = 'function',
					Ps = { name: String, children: [['Raw'], null] }
				function Es() {
					const e = this.tokenStart
					let t,
						n,
						r = null
					return (
						this.eat(ue),
						this.eat(ue),
						this.tokenType === X
							? ((t = this.consumeFunctionName()),
							  (n = t.toLowerCase()),
							  hasOwnProperty.call(this.pseudo, n)
									? (this.skipSC(), (r = this.pseudo[n].call(this)), this.skipSC())
									: ((r = this.createList()),
									  r.push(this.Raw(this.tokenIndex, null, !1))),
							  this.eat(fe))
							: (t = this.consume($)),
						{
							type: 'PseudoElementSelector',
							loc: this.getLocation(e, this.tokenStart),
							name: t,
							children: r,
						}
					)
				}
				function js(e) {
					this.token(ue, ':'),
						this.token(ue, ':'),
						null === e.children
							? this.token($, e.name)
							: (this.token(X, e.name + '('), this.children(e), this.token(fe, ')'))
				}
				const Ds = 47,
					Is = 46
				function Ms() {
					this.skipSC()
					const e = this.consume(oe)
					for (let t = 0; t < e.length; t++) {
						const n = e.charCodeAt(t)
						xe(n) ||
							n === Is ||
							this.error('Unsigned number is expected', this.tokenStart - e.length + t)
					}
					return (
						0 === Number(e) &&
							this.error('Zero number is not allowed', this.tokenStart - e.length),
						e
					)
				}
				const Ns = 'Ratio',
					_s = { left: String, right: String }
				function Bs() {
					const e = this.tokenStart,
						t = Ms.call(this)
					let n
					return (
						this.skipSC(),
						this.eatDelim(Ds),
						(n = Ms.call(this)),
						{
							type: 'Ratio',
							loc: this.getLocation(e, this.tokenStart),
							left: t,
							right: n,
						}
					)
				}
				function Rs(e) {
					this.token(oe, e.left), this.token(re, '/'), this.token(oe, e.right)
				}
				function qs() {
					return this.tokenIndex > 0 && this.lookupType(-1) === se
						? this.tokenIndex > 1
							? this.getTokenStart(this.tokenIndex - 1)
							: this.firstCharOffset
						: this.tokenStart
				}
				const Fs = 'Raw',
					Us = { value: String }
				function Ws(e, t, n) {
					const r = this.getTokenStart(e)
					let o
					return (
						this.skipUntilBalanced(e, t || this.consumeUntilBalanceEnd),
						(o = n && this.tokenStart > r ? qs.call(this) : this.tokenStart),
						{ type: 'Raw', loc: this.getLocation(r, o), value: this.substring(r, o) }
					)
				}
				function Vs(e) {
					this.tokenize(e.value)
				}
				function Hs(e) {
					return this.Raw(e, this.consumeUntilLeftCurlyBracket, !0)
				}
				function Gs() {
					const e = this.SelectorList()
					return (
						'Raw' !== e.type &&
							!1 === this.eof &&
							this.tokenType !== be &&
							this.error(),
						e
					)
				}
				const Qs = 'Rule',
					Ks = 'rule',
					$s = { prelude: ['SelectorList', 'Raw'], block: ['Block'] }
				function Xs() {
					const e = this.tokenIndex,
						t = this.tokenStart
					let n, r
					return (
						(n = this.parseRulePrelude
							? this.parseWithFallback(Gs, Hs)
							: Hs.call(this, e)),
						(r = this.Block(!0)),
						{
							type: 'Rule',
							loc: this.getLocation(t, this.tokenStart),
							prelude: n,
							block: r,
						}
					)
				}
				function Ys(e) {
					this.node(e.prelude), this.node(e.block)
				}
				const Zs = 'Selector',
					Js = {
						children: [
							[
								'TypeSelector',
								'IdSelector',
								'ClassSelector',
								'AttributeSelector',
								'PseudoClassSelector',
								'PseudoElementSelector',
								'Combinator',
								'WhiteSpace',
							],
						],
					}
				function el() {
					const e = this.readSequence(this.scope.Selector)
					return (
						null === this.getFirstListNode(e) && this.error('Selector is expected'),
						{ type: 'Selector', loc: this.getLocationFromList(e), children: e }
					)
				}
				function tl(e) {
					this.children(e)
				}
				const nl = 'SelectorList',
					rl = 'selector',
					ol = { children: [['Selector', 'Raw']] }
				function il() {
					const e = this.createList()
					for (; !this.eof && (e.push(this.Selector()), this.tokenType === pe); )
						this.next()
					return {
						type: 'SelectorList',
						loc: this.getLocationFromList(e),
						children: e,
					}
				}
				function al(e) {
					this.children(e, () => this.token(pe, ','))
				}
				const sl = 92,
					ll = 34,
					cl = 39
				function ul(e) {
					const t = e.length,
						n = e.charCodeAt(0),
						r = n === ll || n === cl ? 1 : 0,
						o = 1 === r && t > 1 && e.charCodeAt(t - 1) === n ? t - 2 : t - 1
					let i = ''
					for (let n = r; n <= o; n++) {
						let r = e.charCodeAt(n)
						if (r === sl) {
							if (n === o) {
								n !== t - 1 && (i = e.substr(n + 1))
								break
							}
							if (((r = e.charCodeAt(++n)), Oe(sl, r))) {
								const t = n - 1,
									r = He(e, t)
								;(n = r - 1), (i += $e(e.substring(t + 1, r)))
							} else 13 === r && 10 === e.charCodeAt(n + 1) && n++
						} else i += e[n]
					}
					return i
				}
				const hl = 'String',
					pl = { value: String }
				function dl() {
					return {
						type: 'String',
						loc: this.getLocation(this.tokenStart, this.tokenEnd),
						value: ul(this.consume(J)),
					}
				}
				function ml(e) {
					this.token(
						J,
						(function (e, t) {
							const n = ll
							let r = '',
								o = !1
							for (let t = 0; t < e.length; t++) {
								const i = e.charCodeAt(t)
								0 !== i
									? i <= 31 || 127 === i
										? ((r += '\\' + i.toString(16)), (o = !0))
										: i === n || i === sl
										? ((r += '\\' + e.charAt(t)), (o = !1))
										: (o && (we(i) || Te(i)) && (r += ' '), (r += e.charAt(t)), (o = !1))
									: (r += '�')
							}
							return '"' + r + '"'
						})(e.value)
					)
				}
				const gl = 33
				function fl(e) {
					return this.Raw(e, null, !1)
				}
				const bl = 'StyleSheet',
					yl = 'stylesheet',
					kl = { children: [['Comment', 'CDO', 'CDC', 'Atrule', 'Rule', 'Raw']] }
				function vl() {
					const e = this.tokenStart,
						t = this.createList()
					let n
					for (; !this.eof; ) {
						switch (this.tokenType) {
							case se:
								this.next()
								continue
							case ke:
								if (this.charCodeAt(this.tokenStart + 2) !== gl) {
									this.next()
									continue
								}
								n = this.Comment()
								break
							case le:
								n = this.CDO()
								break
							case ce:
								n = this.CDC()
								break
							case Y:
								n = this.parseWithFallback(this.Atrule, fl)
								break
							default:
								n = this.parseWithFallback(this.Rule, fl)
						}
						t.push(n)
					}
					return {
						type: 'StyleSheet',
						loc: this.getLocation(e, this.tokenStart),
						children: t,
					}
				}
				function xl(e) {
					this.children(e)
				}
				const wl = 42,
					Sl = 124
				function Cl() {
					this.tokenType !== $ &&
						!1 === this.isDelim(wl) &&
						this.error('Identifier or asterisk is expected'),
						this.next()
				}
				const zl = 'TypeSelector',
					Al = { name: String }
				function Ll() {
					const e = this.tokenStart
					return (
						this.isDelim(Sl)
							? (this.next(), Cl.call(this))
							: (Cl.call(this), this.isDelim(Sl) && (this.next(), Cl.call(this))),
						{
							type: 'TypeSelector',
							loc: this.getLocation(e, this.tokenStart),
							name: this.substrToCursor(e),
						}
					)
				}
				function Tl(e) {
					this.tokenize(e.name)
				}
				const Ol = 43,
					Pl = 45,
					El = 63
				function jl(e, t) {
					let n = 0
					for (let r = this.tokenStart + e; r < this.tokenEnd; r++) {
						const o = this.charCodeAt(r)
						if (o === Pl && t && 0 !== n) return jl.call(this, e + n + 1, !1), -1
						we(o) ||
							this.error(
								t && 0 !== n
									? 'Hyphen minus' + (n < 6 ? ' or hex digit' : '') + ' is expected'
									: n < 6
									? 'Hex digit is expected'
									: 'Unexpected input',
								r
							),
							++n > 6 && this.error('Too many hex digits', r)
					}
					return this.next(), n
				}
				function Dl(e) {
					let t = 0
					for (; this.isDelim(El); )
						++t > e && this.error('Too many question marks'), this.next()
				}
				function Il(e) {
					this.charCodeAt(this.tokenStart) !== e &&
						this.error((e === Ol ? 'Plus sign' : 'Hyphen minus') + ' is expected')
				}
				function Ml() {
					let e = 0
					switch (this.tokenType) {
						case oe:
							if (((e = jl.call(this, 1, !0)), this.isDelim(El))) {
								Dl.call(this, 6 - e)
								break
							}
							if (this.tokenType === ae || this.tokenType === oe) {
								Il.call(this, Pl), jl.call(this, 1, !1)
								break
							}
							break
						case ae:
							;(e = jl.call(this, 1, !0)), e > 0 && Dl.call(this, 6 - e)
							break
						default:
							if ((this.eatDelim(Ol), this.tokenType === $)) {
								;(e = jl.call(this, 0, !0)), e > 0 && Dl.call(this, 6 - e)
								break
							}
							if (this.isDelim(El)) {
								this.next(), Dl.call(this, 5)
								break
							}
							this.error('Hex digit or question mark is expected')
					}
				}
				const Nl = 'UnicodeRange',
					_l = { value: String }
				function Bl() {
					const e = this.tokenStart
					return (
						this.eatIdent('u'),
						Ml.call(this),
						{
							type: 'UnicodeRange',
							loc: this.getLocation(e, this.tokenStart),
							value: this.substrToCursor(e),
						}
					)
				}
				function Rl(e) {
					this.tokenize(e.value)
				}
				const ql = 32,
					Fl = 92,
					Ul = 34,
					Wl = 39,
					Vl = 40,
					Hl = 41,
					Gl = 'Url',
					Ql = { value: String }
				function Kl() {
					const e = this.tokenStart
					let t
					switch (this.tokenType) {
						case te:
							t = (function (e) {
								const t = e.length
								let n = 4,
									r = e.charCodeAt(t - 1) === Hl ? t - 2 : t - 1,
									o = ''
								for (; n < r && Te(e.charCodeAt(n)); ) n++
								for (; n < r && Te(e.charCodeAt(r)); ) r--
								for (let i = n; i <= r; i++) {
									let n = e.charCodeAt(i)
									if (n === Fl) {
										if (i === r) {
											i !== t - 1 && (o = e.substr(i + 1))
											break
										}
										if (((n = e.charCodeAt(++i)), Oe(Fl, n))) {
											const t = i - 1,
												n = He(e, t)
											;(i = n - 1), (o += $e(e.substring(t + 1, n)))
										} else 13 === n && 10 === e.charCodeAt(i + 1) && i++
									} else o += e[i]
								}
								return o
							})(this.consume(te))
							break
						case X:
							this.cmpStr(this.tokenStart, this.tokenEnd, 'url(') ||
								this.error('Function name must be `url`'),
								this.eat(X),
								this.skipSC(),
								(t = ul(this.consume(J))),
								this.skipSC(),
								this.eof || this.eat(fe)
							break
						default:
							this.error('Url or Function is expected')
					}
					return { type: 'Url', loc: this.getLocation(e, this.tokenStart), value: t }
				}
				function $l(e) {
					this.token(
						te,
						(function (e) {
							let t = '',
								n = !1
							for (let r = 0; r < e.length; r++) {
								const o = e.charCodeAt(r)
								0 !== o
									? o <= 31 || 127 === o
										? ((t += '\\' + o.toString(16)), (n = !0))
										: o === ql || o === Fl || o === Ul || o === Wl || o === Vl || o === Hl
										? ((t += '\\' + e.charAt(r)), (n = !1))
										: (n && we(o) && (t += ' '), (t += e.charAt(r)), (n = !1))
									: (t += '�')
							}
							return 'url(' + t + ')'
						})(e.value)
					)
				}
				const Xl = 'Value',
					Yl = { children: [[]] }
				function Zl() {
					const e = this.tokenStart,
						t = this.readSequence(this.scope.Value)
					return {
						type: 'Value',
						loc: this.getLocation(e, this.tokenStart),
						children: t,
					}
				}
				function Jl(e) {
					this.children(e)
				}
				const ec = Object.freeze({ type: 'WhiteSpace', loc: null, value: ' ' }),
					tc = 'WhiteSpace',
					nc = { value: String }
				function rc() {
					return this.eat(se), ec
				}
				function oc(e) {
					this.token(se, e.value)
				}
				const ic = 35,
					ac = 42,
					sc = 43,
					lc = 45,
					cc = 47,
					uc = 117
				function hc(e) {
					switch (this.tokenType) {
						case Z:
							return this.Hash()
						case pe:
							return this.Operator()
						case ge:
							return this.Parentheses(this.readSequence, e.recognizer)
						case de:
							return this.Brackets(this.readSequence, e.recognizer)
						case J:
							return this.String()
						case ae:
							return this.Dimension()
						case ie:
							return this.Percentage()
						case oe:
							return this.Number()
						case X:
							return this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')
								? this.Url()
								: this.Function(this.readSequence, e.recognizer)
						case te:
							return this.Url()
						case $:
							return this.cmpChar(this.tokenStart, uc) &&
								this.cmpChar(this.tokenStart + 1, sc)
								? this.UnicodeRange()
								: this.Identifier()
						case re: {
							const e = this.charCodeAt(this.tokenStart)
							if (e === cc || e === ac || e === sc || e === lc) return this.Operator()
							e === ic &&
								this.error('Hex or identifier is expected', this.tokenStart + 1)
							break
						}
					}
				}
				const pc = { getNode: hc },
					dc = {
						onWhiteSpace: function (e, t) {
							null !== t.last &&
								'Combinator' !== t.last.type &&
								null !== e &&
								'Combinator' !== e.type &&
								t.push({ type: 'Combinator', loc: null, name: ' ' })
						},
						getNode: function () {
							switch (this.tokenType) {
								case de:
									return this.AttributeSelector()
								case Z:
									return this.IdSelector()
								case ue:
									return this.lookupType(1) === ue
										? this.PseudoElementSelector()
										: this.PseudoClassSelector()
								case $:
									return this.TypeSelector()
								case oe:
								case ie:
									return this.Percentage()
								case ae:
									46 === this.charCodeAt(this.tokenStart) &&
										this.error('Identifier is expected', this.tokenStart + 1)
									break
								case re:
									switch (this.charCodeAt(this.tokenStart)) {
										case 43:
										case 62:
										case 126:
										case 47:
											return this.Combinator()
										case 46:
											return this.ClassSelector()
										case 42:
										case 124:
											return this.TypeSelector()
										case 35:
											return this.IdSelector()
										case 38:
											return this.NestingSelector()
									}
							}
						},
					}
				function mc(e) {
					return (
						null !== e &&
						'Operator' === e.type &&
						('-' === e.value[e.value.length - 1] ||
							'+' === e.value[e.value.length - 1])
					)
				}
				const gc = {
					getNode: hc,
					onWhiteSpace(e, t) {
						mc(e) && (e.value = ' ' + e.value), mc(t.last) && (t.last.value += ' ')
					},
					expression: function () {
						return this.createSingleNodeList(this.Raw(this.tokenIndex, null, !1))
					},
					var: function () {
						const e = this.createList()
						if (
							(this.skipSC(),
							e.push(this.Identifier()),
							this.skipSC(),
							this.tokenType === pe)
						) {
							e.push(this.Operator())
							const t = this.tokenIndex,
								n = this.parseCustomProperty
									? this.Value(null)
									: this.Raw(
											this.tokenIndex,
											this.consumeUntilExclamationMarkOrSemicolon,
											!1
									  )
							if ('Value' === n.type && n.children.isEmpty)
								for (let e = t - this.tokenIndex; e <= 0; e++)
									if (this.lookupType(e) === se) {
										n.children.appendData({ type: 'WhiteSpace', loc: null, value: ' ' })
										break
									}
							e.push(n)
						}
						return e
					},
				}
				function fc() {
					return this.createSingleNodeList(this.Raw(this.tokenIndex, null, !1))
				}
				function bc() {
					return (
						this.skipSC(),
						this.tokenType === $ && this.lookupNonWSType(1) === ue
							? this.createSingleNodeList(this.Declaration())
							: yc.call(this)
					)
				}
				function yc() {
					const e = this.createList()
					let t
					this.skipSC()
					e: for (; !this.eof; ) {
						switch (this.tokenType) {
							case ke:
							case se:
								this.next()
								continue
							case X:
								t = this.Function(fc, this.scope.AtrulePrelude)
								break
							case $:
								t = this.Identifier()
								break
							case ge:
								t = this.Parentheses(bc, this.scope.AtrulePrelude)
								break
							default:
								break e
						}
						e.push(t)
					}
					return e
				}
				const kc = {
						parse() {
							return this.createSingleNodeList(this.SelectorList())
						},
					},
					vc = {
						parse() {
							return this.createSingleNodeList(this.Selector())
						},
					},
					xc = {
						parse() {
							return this.createSingleNodeList(this.Identifier())
						},
					},
					wc = {
						parse() {
							return this.createSingleNodeList(this.Nth())
						},
					},
					Sc = (function t(n) {
						const r = (function (e) {
								let t = '',
									n = '<unknown>',
									r = !1,
									o = yt,
									i = !1
								const a = new rt(),
									s = Object.assign(
										new st(),
										(function (e) {
											const t = {
												context: Object.create(null),
												scope: Object.assign(Object.create(null), e.scope),
												atrule: zt(e.atrule),
												pseudo: zt(e.pseudo),
												node: zt(e.node),
											}
											for (const n in e.parseContext)
												switch (typeof e.parseContext[n]) {
													case 'function':
														t.context[n] = e.parseContext[n]
														break
													case 'string':
														t.context[n] = Ct(e.parseContext[n])
												}
											return { config: t, ...t, ...t.node }
										})(e || {}),
										{
											parseAtrulePrelude: !0,
											parseRulePrelude: !0,
											parseValue: !0,
											parseCustomProperty: !1,
											readSequence: bt,
											consumeUntilBalanceEnd: () => 0,
											consumeUntilLeftCurlyBracket: (e) => (e === wt ? 1 : 0),
											consumeUntilLeftCurlyBracketOrSemicolon: (e) =>
												e === wt || e === xt ? 1 : 0,
											consumeUntilExclamationMarkOrSemicolon: (e) =>
												e === kt || e === xt ? 1 : 0,
											consumeUntilSemicolonIncluded: (e) => (e === xt ? 2 : 0),
											createList: () => new ut(),
											createSingleNodeList: (e) => new ut().appendData(e),
											getFirstListNode: (e) => e && e.first,
											getLastListNode: (e) => e && e.last,
											parseWithFallback(e, t) {
												const n = this.tokenIndex
												try {
													return e.call(this)
												} catch (e) {
													if (i) throw e
													const r = t.call(this, n)
													return (i = !0), o(e, r), (i = !1), r
												}
											},
											lookupNonWSType(e) {
												let t
												do {
													if (((t = this.lookupType(e++)), t !== se)) return t
												} while (t !== St)
												return St
											},
											charCodeAt: (e) => (e >= 0 && e < t.length ? t.charCodeAt(e) : 0),
											substring: (e, n) => t.substring(e, n),
											substrToCursor(e) {
												return this.source.substring(e, this.tokenStart)
											},
											cmpChar: (e, n) => Fe(t, e, n),
											cmpStr: (e, n, r) => Ue(t, e, n, r),
											consume(e) {
												const t = this.tokenStart
												return this.eat(e), this.substrToCursor(t)
											},
											consumeFunctionName() {
												const e = t.substring(this.tokenStart, this.tokenEnd - 1)
												return this.eat(X), e
											},
											consumeNumber(e) {
												const n = t.substring(this.tokenStart, Qe(t, this.tokenStart))
												return this.eat(e), n
											},
											eat(e) {
												if (this.tokenType !== e) {
													const t = Xe[e]
														.slice(0, -6)
														.replace(/-/g, ' ')
														.replace(/^./, (e) => e.toUpperCase())
													let n = `${/[[\](){}]/.test(t) ? `"${t}"` : t} is expected`,
														r = this.tokenStart
													switch (e) {
														case $:
															this.tokenType === X || this.tokenType === te
																? ((r = this.tokenEnd - 1),
																  (n = 'Identifier is expected but function found'))
																: (n = 'Identifier is expected')
															break
														case Z:
															this.isDelim(vt) && (this.next(), r++, (n = 'Name is expected'))
															break
														case ie:
															this.tokenType === oe &&
																((r = this.tokenEnd), (n = 'Percent sign is expected'))
													}
													this.error(n, r)
												}
												this.next()
											},
											eatIdent(e) {
												;(this.tokenType === $ && !1 !== this.lookupValue(0, e)) ||
													this.error(`Identifier "${e}" is expected`),
													this.next()
											},
											eatDelim(e) {
												this.isDelim(e) ||
													this.error(`Delim "${String.fromCharCode(e)}" is expected`),
													this.next()
											},
											getLocation: (e, t) => (r ? a.getLocationRange(e, t, n) : null),
											getLocationFromList(e) {
												if (r) {
													const t = this.getFirstListNode(e),
														r = this.getLastListNode(e)
													return a.getLocationRange(
														null !== t ? t.loc.start.offset - a.startOffset : this.tokenStart,
														null !== r ? r.loc.end.offset - a.startOffset : this.tokenStart,
														n
													)
												}
												return null
											},
											error(e, n) {
												const r =
													void 0 !== n && n < t.length
														? a.getLocation(n)
														: this.eof
														? a.getLocation(
																(function (e, t) {
																	for (; t >= 0 && Te(e.charCodeAt(t)); t--);
																	return t + 1
																})(t, t.length - 1)
														  )
														: a.getLocation(this.tokenStart)
												throw new ft(e || 'Unexpected input', t, r.offset, r.line, r.column)
											},
										}
									)
								return Object.assign(
									function (e, l) {
										;(t = e),
											(l = l || {}),
											s.setSource(t, lt),
											a.setSource(t, l.offset, l.line, l.column),
											(n = l.filename || '<unknown>'),
											(r = Boolean(l.positions)),
											(o = 'function' == typeof l.onParseError ? l.onParseError : yt),
											(i = !1),
											(s.parseAtrulePrelude =
												!('parseAtrulePrelude' in l) || Boolean(l.parseAtrulePrelude)),
											(s.parseRulePrelude =
												!('parseRulePrelude' in l) || Boolean(l.parseRulePrelude)),
											(s.parseValue = !('parseValue' in l) || Boolean(l.parseValue)),
											(s.parseCustomProperty =
												'parseCustomProperty' in l && Boolean(l.parseCustomProperty))
										const { context: c = 'default', onComment: u } = l
										if (c in s.context == 0)
											throw new Error('Unknown context `' + c + '`')
										'function' == typeof u &&
											s.forEachToken((e, n, r) => {
												if (e === ke) {
													const e = s.getLocation(n, r),
														o = Ue(t, r - 2, r, '*/')
															? t.slice(n + 2, r - 2)
															: t.slice(n + 2, r)
													u(o, e)
												}
											})
										const h = s.context[c].call(s, l)
										return s.eof || s.error(), h
									},
									{ SyntaxError: ft, config: s.config }
								)
							})(n),
							o = (function (e) {
								const t = (function (e) {
										const t = {}
										for (const n in e.node)
											if (Rt.call(e.node, n)) {
												const r = e.node[n]
												if (!r.structure)
													throw new Error(
														'Missed `structure` field in `' + n + '` node type definition'
													)
												t[n] = Wt(0, r)
											}
										return t
									})(e),
									n = {},
									r = {},
									o = Symbol('break-walk'),
									i = Symbol('skip-node')
								for (const e in t)
									Rt.call(t, e) &&
										null !== t[e] &&
										((n[e] = Vt(t[e], !1)), (r[e] = Vt(t[e], !0)))
								const a = Ht(n),
									s = Ht(r),
									l = function (e, l) {
										function c(e, t, n) {
											const r = u.call(m, e, t, n)
											return (
												r === o ||
												(r !== i &&
													(!(!p.hasOwnProperty(e.type) || !p[e.type](e, m, c, d)) ||
														h.call(m, e, t, n) === o))
											)
										}
										let u = qt,
											h = qt,
											p = n,
											d = (e, t, n, r) => e || c(t, n, r)
										const m = {
											break: o,
											skip: i,
											root: e,
											stylesheet: null,
											atrule: null,
											atrulePrelude: null,
											rule: null,
											selector: null,
											block: null,
											declaration: null,
											function: null,
										}
										if ('function' == typeof l) u = l
										else if (
											l &&
											((u = Ft(l.enter)), (h = Ft(l.leave)), l.reverse && (p = r), l.visit)
										) {
											if (a.hasOwnProperty(l.visit))
												p = l.reverse ? s[l.visit] : a[l.visit]
											else if (!t.hasOwnProperty(l.visit))
												throw new Error(
													'Bad value `' +
														l.visit +
														'` for `visit` option (should be: ' +
														Object.keys(t).sort().join(', ') +
														')'
												)
											;(u = Ut(u, l.visit)), (h = Ut(h, l.visit))
										}
										if (u === qt && h === qt)
											throw new Error(
												"Neither `enter` nor `leave` walker handler is set or both aren't a function"
											)
										c(e)
									}
								return (
									(l.break = o),
									(l.skip = i),
									(l.find = function (e, t) {
										let n = null
										return (
											l(e, function (e, r, i) {
												if (t.call(this, e, r, i)) return (n = e), o
											}),
											n
										)
									}),
									(l.findLast = function (e, t) {
										let n = null
										return (
											l(e, {
												reverse: !0,
												enter(e, r, i) {
													if (t.call(this, e, r, i)) return (n = e), o
												},
											}),
											n
										)
									}),
									(l.findAll = function (e, t) {
										const n = []
										return (
											l(e, function (e, r, o) {
												t.call(this, e, r, o) && n.push(e)
											}),
											n
										)
									}),
									l
								)
							})(n),
							i = (function (t) {
								const n = new Map()
								for (let e in t.node) {
									const r = t.node[e]
									'function' == typeof (r.generate || r) && n.set(e, r.generate || r)
								}
								return function (t, r) {
									let o = '',
										i = 0,
										a = {
											node(e) {
												if (!n.has(e.type)) throw new Error('Unknown node type: ' + e.type)
												n.get(e.type).call(s, e)
											},
											tokenBefore: Mt,
											token(e, t) {
												;(i = this.tokenBefore(i, e, t)),
													this.emit(t, e, !1),
													e === re && t.charCodeAt(0) === Nt && this.emit('\n', se, !0)
											},
											emit(e) {
												o += e
											},
											result: () => o,
										}
									r &&
										('function' == typeof r.decorator && (a = r.decorator(a)),
										r.sourceMap &&
											(a = (function (e) {
												const t = new At.h(),
													n = { line: 1, column: 0 },
													r = { line: 0, column: 0 },
													o = { line: 1, column: 0 },
													i = { generated: o }
												let a = 1,
													s = 0,
													l = !1
												const c = e.node
												e.node = function (e) {
													if (e.loc && e.loc.start && Lt.has(e.type)) {
														const c = e.loc.start.line,
															u = e.loc.start.column - 1
														;(r.line === c && r.column === u) ||
															((r.line = c),
															(r.column = u),
															(n.line = a),
															(n.column = s),
															l &&
																((l = !1),
																(n.line === o.line && n.column === o.column) ||
																	t.addMapping(i)),
															(l = !0),
															t.addMapping({
																source: e.loc.source,
																original: r,
																generated: n,
															}))
													}
													c.call(this, e),
														l && Lt.has(e.type) && ((o.line = a), (o.column = s))
												}
												const u = e.emit
												e.emit = function (e, t, n) {
													for (let t = 0; t < e.length; t++)
														10 === e.charCodeAt(t) ? (a++, (s = 0)) : s++
													u(e, t, n)
												}
												const h = e.result
												return (
													(e.result = function () {
														return l && t.addMapping(i), { css: h(), map: t }
													}),
													e
												)
											})(a)),
										r.mode in e && (a.tokenBefore = e[r.mode]))
									const s = {
										node: (e) => a.node(e),
										children: _t,
										token: (e, t) => a.token(e, t),
										tokenize: Bt,
									}
									return a.node(t), a.result()
								}
							})(n),
							{ fromPlainObject: a, toPlainObject: s } = (function (e) {
								return {
									fromPlainObject: (t) => (
										e(t, {
											enter(e) {
												e.children &&
													e.children instanceof ut == 0 &&
													(e.children = new ut().fromArray(e.children))
											},
										}),
										t
									),
									toPlainObject: (t) => (
										e(t, {
											leave(e) {
												e.children &&
													e.children instanceof ut &&
													(e.children = e.children.toArray())
											},
										}),
										t
									),
								}
							})(o),
							l = {
								lexer: null,
								createLexer: (e) => new xo(e, l, l.lexer.structure),
								tokenize: lt,
								parse: r,
								generate: i,
								walk: o,
								find: o.find,
								findLast: o.findLast,
								findAll: o.findAll,
								fromPlainObject: a,
								toPlainObject: s,
								fork(e) {
									const r = Co({}, n)
									return t('function' == typeof e ? e(r, Object.assign) : Co(r, e))
								},
							}
						return (
							(l.lexer = new xo(
								{
									generic: !0,
									units: n.units,
									types: n.types,
									atrules: n.atrules,
									properties: n.properties,
									node: n.node,
								},
								l
							)),
							l
						)
					})(
						Co(
							{},
							{
								generic: !0,
								generic: !0,
								units: {
									angle: ['deg', 'grad', 'rad', 'turn'],
									decibel: ['db'],
									flex: ['fr'],
									frequency: ['hz', 'khz'],
									length: [
										'cm',
										'mm',
										'q',
										'in',
										'pt',
										'pc',
										'px',
										'em',
										'rem',
										'ex',
										'rex',
										'cap',
										'rcap',
										'ch',
										'rch',
										'ic',
										'ric',
										'lh',
										'rlh',
										'vw',
										'svw',
										'lvw',
										'dvw',
										'vh',
										'svh',
										'lvh',
										'dvh',
										'vi',
										'svi',
										'lvi',
										'dvi',
										'vb',
										'svb',
										'lvb',
										'dvb',
										'vmin',
										'svmin',
										'lvmin',
										'dvmin',
										'vmax',
										'svmax',
										'lvmax',
										'dvmax',
										'cqw',
										'cqh',
										'cqi',
										'cqb',
										'cqmin',
										'cqmax',
									],
									resolution: ['dpi', 'dpcm', 'dppx', 'x'],
									semitones: ['st'],
									time: ['s', 'ms'],
								},
								types: {
									'abs()': 'abs( <calc-sum> )',
									'absolute-size':
										'xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large',
									'acos()': 'acos( <calc-sum> )',
									'alpha-value': '<number>|<percentage>',
									'angle-percentage': '<angle>|<percentage>',
									'angular-color-hint': '<angle-percentage>',
									'angular-color-stop': '<color>&&<color-stop-angle>?',
									'angular-color-stop-list':
										'[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>',
									'animateable-feature': 'scroll-position|contents|<custom-ident>',
									'asin()': 'asin( <calc-sum> )',
									'atan()': 'atan( <calc-sum> )',
									'atan2()': 'atan2( <calc-sum> , <calc-sum> )',
									attachment: 'scroll|fixed|local',
									'attr()': 'attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )',
									'attr-matcher': "['~'|'|'|'^'|'$'|'*']? '='",
									'attr-modifier': 'i|s',
									'attribute-selector':
										"'[' <wq-name> ']'|'[' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? ']'",
									'auto-repeat':
										'repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )',
									'auto-track-list':
										'[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?',
									axis: 'block|inline|vertical|horizontal',
									'baseline-position': '[first|last]? baseline',
									'basic-shape': '<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>',
									'bg-image': 'none|<image>',
									'bg-layer':
										'<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>',
									'bg-position':
										'[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]',
									'bg-size': '[<length-percentage>|auto]{1,2}|cover|contain',
									'blur()': 'blur( <length> )',
									'blend-mode':
										'normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity',
									box: 'border-box|padding-box|content-box',
									'brightness()': 'brightness( <number-percentage> )',
									'calc()': 'calc( <calc-sum> )',
									'calc-sum': "<calc-product> [['+'|'-'] <calc-product>]*",
									'calc-product': "<calc-value> ['*' <calc-value>|'/' <number>]*",
									'calc-value':
										'<number>|<dimension>|<percentage>|<calc-constant>|( <calc-sum> )',
									'calc-constant': 'e|pi|infinity|-infinity|NaN',
									'cf-final-image': '<image>|<color>',
									'cf-mixing-image': '<percentage>?&&<image>',
									'circle()': 'circle( [<shape-radius>]? [at <position>]? )',
									'clamp()': 'clamp( <calc-sum>#{3} )',
									'class-selector': "'.' <ident-token>",
									'clip-source': '<url>',
									color:
										'<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hwb()>|<lab()>|<lch()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>',
									'color-stop': '<color-stop-length>|<color-stop-angle>',
									'color-stop-angle': '<angle-percentage>{1,2}',
									'color-stop-length': '<length-percentage>{1,2}',
									'color-stop-list':
										'[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>',
									combinator: "'>'|'+'|'~'|['||']",
									'common-lig-values': '[common-ligatures|no-common-ligatures]',
									'compat-auto':
										'searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button',
									'composite-style':
										'clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor',
									'compositing-operator': 'add|subtract|intersect|exclude',
									'compound-selector':
										'[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!',
									'compound-selector-list': '<compound-selector>#',
									'complex-selector':
										'<compound-selector> [<combinator>? <compound-selector>]*',
									'complex-selector-list': '<complex-selector>#',
									'conic-gradient()':
										'conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )',
									'contextual-alt-values': '[contextual|no-contextual]',
									'content-distribution':
										'space-between|space-around|space-evenly|stretch',
									'content-list':
										'[<string>|contents|<image>|<counter>|<quote>|<target>|<leader()>|<attr()>]+',
									'content-position': 'center|start|end|flex-start|flex-end',
									'content-replacement': '<image>',
									'contrast()': 'contrast( [<number-percentage>] )',
									'cos()': 'cos( <calc-sum> )',
									counter: '<counter()>|<counters()>',
									'counter()': 'counter( <counter-name> , <counter-style>? )',
									'counter-name': '<custom-ident>',
									'counter-style': '<counter-style-name>|symbols( )',
									'counter-style-name': '<custom-ident>',
									'counters()':
										'counters( <counter-name> , <string> , <counter-style>? )',
									'cross-fade()': 'cross-fade( <cf-mixing-image> , <cf-final-image>? )',
									'cubic-bezier-timing-function':
										'ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )',
									'deprecated-system-color':
										'ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText',
									'discretionary-lig-values':
										'[discretionary-ligatures|no-discretionary-ligatures]',
									'display-box': 'contents|none',
									'display-inside': 'flow|flow-root|table|flex|grid|ruby',
									'display-internal':
										'table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container',
									'display-legacy':
										'inline-block|inline-list-item|inline-table|inline-flex|inline-grid',
									'display-listitem': '<display-outside>?&&[flow|flow-root]?&&list-item',
									'display-outside': 'block|inline|run-in',
									'drop-shadow()': 'drop-shadow( <length>{2,3} <color>? )',
									'east-asian-variant-values':
										'[jis78|jis83|jis90|jis04|simplified|traditional]',
									'east-asian-width-values': '[full-width|proportional-width]',
									'element()':
										'element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )',
									'ellipse()': 'ellipse( [<shape-radius>{2}]? [at <position>]? )',
									'ending-shape': 'circle|ellipse',
									'env()': 'env( <custom-ident> , <declaration-value>? )',
									'exp()': 'exp( <calc-sum> )',
									'explicit-track-list': '[<line-names>? <track-size>]+ <line-names>?',
									'family-name': '<string>|<custom-ident>+',
									'feature-tag-value': '<string> [<integer>|on|off]?',
									'feature-type':
										'@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation',
									'feature-value-block':
										"<feature-type> '{' <feature-value-declaration-list> '}'",
									'feature-value-block-list': '<feature-value-block>+',
									'feature-value-declaration': '<custom-ident> : <integer>+ ;',
									'feature-value-declaration-list': '<feature-value-declaration>',
									'feature-value-name': '<custom-ident>',
									'fill-rule': 'nonzero|evenodd',
									'filter-function':
										'<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>',
									'filter-function-list': '[<filter-function>|<url>]+',
									'final-bg-layer':
										"<'background-color'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
									'fixed-breadth': '<length-percentage>',
									'fixed-repeat':
										'repeat( [<integer [1,∞]>] , [<line-names>? <fixed-size>]+ <line-names>? )',
									'fixed-size':
										'<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )',
									'font-stretch-absolute':
										'normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>',
									'font-variant-css21': '[normal|small-caps]',
									'font-weight-absolute': 'normal|bold|<number [1,1000]>',
									'frequency-percentage': '<frequency>|<percentage>',
									'general-enclosed':
										'[<function-token> <any-value> )]|( <ident> <any-value> )',
									'generic-family':
										'serif|sans-serif|cursive|fantasy|monospace|-apple-system',
									'generic-name': 'serif|sans-serif|cursive|fantasy|monospace',
									'geometry-box': '<shape-box>|fill-box|stroke-box|view-box',
									gradient:
										'<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<repeating-conic-gradient()>|<-legacy-gradient>',
									'grayscale()': 'grayscale( <number-percentage> )',
									'grid-line':
										'auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]',
									'historical-lig-values':
										'[historical-ligatures|no-historical-ligatures]',
									'hsl()':
										'hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )',
									'hsla()':
										'hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )',
									hue: '<number>|<angle>',
									'hue-rotate()': 'hue-rotate( <angle> )',
									'hwb()':
										'hwb( [<hue>|none] [<percentage>|none] [<percentage>|none] [/ [<alpha-value>|none]]? )',
									'hypot()': 'hypot( <calc-sum># )',
									image:
										'<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>',
									'image()': 'image( <image-tags>? [<image-src>? , <color>?]! )',
									'image-set()': 'image-set( <image-set-option># )',
									'image-set-option':
										'[<image>|<string>] [<resolution>||type( <string> )]',
									'image-src': '<url>|<string>',
									'image-tags': 'ltr|rtl',
									'inflexible-breadth':
										'<length-percentage>|min-content|max-content|auto',
									'inset()':
										"inset( <length-percentage>{1,4} [round <'border-radius'>]? )",
									'invert()': 'invert( <number-percentage> )',
									'keyframes-name': '<custom-ident>|<string>',
									'keyframe-block': '<keyframe-selector># { <declaration-list> }',
									'keyframe-block-list': '<keyframe-block>+',
									'keyframe-selector': 'from|to|<percentage>',
									'lab()':
										'lab( [<percentage>|<number>|none] [<percentage>|<number>|none] [<percentage>|<number>|none] [/ [<alpha-value>|none]]? )',
									'layer()': 'layer( <layer-name> )',
									'layer-name': "<ident> ['.' <ident>]*",
									'lch()':
										'lch( [<percentage>|<number>|none] [<percentage>|<number>|none] [<hue>|none] [/ [<alpha-value>|none]]? )',
									'leader()': 'leader( <leader-type> )',
									'leader-type': 'dotted|solid|space|<string>',
									'length-percentage': '<length>|<percentage>',
									'line-names': "'[' <custom-ident>* ']'",
									'line-name-list': '[<line-names>|<name-repeat>]+',
									'line-style':
										'none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset',
									'line-width': '<length>|thin|medium|thick',
									'linear-color-hint': '<length-percentage>',
									'linear-color-stop': '<color> <color-stop-length>?',
									'linear-gradient()':
										'linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )',
									'log()': 'log( <calc-sum> , <calc-sum>? )',
									'mask-layer':
										'<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>',
									'mask-position':
										'[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?',
									'mask-reference': 'none|<image>|<mask-source>',
									'mask-source': '<url>',
									'masking-mode': 'alpha|luminance|match-source',
									'matrix()': 'matrix( <number>#{6} )',
									'matrix3d()': 'matrix3d( <number>#{16} )',
									'max()': 'max( <calc-sum># )',
									'media-and': '<media-in-parens> [and <media-in-parens>]+',
									'media-condition':
										'<media-not>|<media-and>|<media-or>|<media-in-parens>',
									'media-condition-without-or':
										'<media-not>|<media-and>|<media-in-parens>',
									'media-feature': '( [<mf-plain>|<mf-boolean>|<mf-range>] )',
									'media-in-parens':
										'( <media-condition> )|<media-feature>|<general-enclosed>',
									'media-not': 'not <media-in-parens>',
									'media-or': '<media-in-parens> [or <media-in-parens>]+',
									'media-query':
										'<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?',
									'media-query-list': '<media-query>#',
									'media-type': '<ident>',
									'mf-boolean': '<mf-name>',
									'mf-name': '<ident>',
									'mf-plain': '<mf-name> : <mf-value>',
									'mf-range':
										"<mf-name> ['<'|'>']? '='? <mf-value>|<mf-value> ['<'|'>']? '='? <mf-name>|<mf-value> '<' '='? <mf-name> '<' '='? <mf-value>|<mf-value> '>' '='? <mf-name> '>' '='? <mf-value>",
									'mf-value': '<number>|<dimension>|<ident>|<ratio>',
									'min()': 'min( <calc-sum># )',
									'minmax()':
										'minmax( [<length-percentage>|min-content|max-content|auto] , [<length-percentage>|<flex>|min-content|max-content|auto] )',
									'mod()': 'mod( <calc-sum> , <calc-sum> )',
									'name-repeat': 'repeat( [<integer [1,∞]>|auto-fill] , <line-names>+ )',
									'named-color':
										'transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>',
									'namespace-prefix': '<ident>',
									'ns-prefix': "[<ident-token>|'*']? '|'",
									'number-percentage': '<number>|<percentage>',
									'numeric-figure-values': '[lining-nums|oldstyle-nums]',
									'numeric-fraction-values': '[diagonal-fractions|stacked-fractions]',
									'numeric-spacing-values': '[proportional-nums|tabular-nums]',
									nth: '<an-plus-b>|even|odd',
									'opacity()': 'opacity( [<number-percentage>] )',
									'overflow-position': 'unsafe|safe',
									'outline-radius': '<length>|<percentage>',
									'page-body':
										'<declaration>? [; <page-body>]?|<page-margin-box> <page-body>',
									'page-margin-box': "<page-margin-box-type> '{' <declaration-list> '}'",
									'page-margin-box-type':
										'@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom',
									'page-selector-list': '[<page-selector>#]?',
									'page-selector': '<pseudo-page>+|<ident> <pseudo-page>*',
									'page-size': 'A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger',
									'path()': 'path( [<fill-rule> ,]? <string> )',
									'paint()': 'paint( <ident> , <declaration-value>? )',
									'perspective()': 'perspective( [<length [0,∞]>|none] )',
									'polygon()':
										'polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )',
									position:
										'[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]',
									'pow()': 'pow( <calc-sum> , <calc-sum> )',
									'pseudo-class-selector':
										"':' <ident-token>|':' <function-token> <any-value> ')'",
									'pseudo-element-selector': "':' <pseudo-class-selector>",
									'pseudo-page': ': [left|right|first|blank]',
									quote: 'open-quote|close-quote|no-open-quote|no-close-quote',
									'radial-gradient()':
										'radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )',
									ratio: '<number [0,∞]> [/ <number [0,∞]>]?',
									'relative-selector': '<combinator>? <complex-selector>',
									'relative-selector-list': '<relative-selector>#',
									'relative-size': 'larger|smaller',
									'rem()': 'rem( <calc-sum> , <calc-sum> )',
									'repeat-style':
										'repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}',
									'repeating-conic-gradient()':
										'repeating-conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )',
									'repeating-linear-gradient()':
										'repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )',
									'repeating-radial-gradient()':
										'repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )',
									'reversed-counter-name': 'reversed( <counter-name> )',
									'rgb()':
										'rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )',
									'rgba()':
										'rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )',
									'rotate()': 'rotate( [<angle>|<zero>] )',
									'rotate3d()':
										'rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )',
									'rotateX()': 'rotateX( [<angle>|<zero>] )',
									'rotateY()': 'rotateY( [<angle>|<zero>] )',
									'rotateZ()': 'rotateZ( [<angle>|<zero>] )',
									'round()': 'round( <rounding-strategy>? , <calc-sum> , <calc-sum> )',
									'rounding-strategy': 'nearest|up|down|to-zero',
									'saturate()': 'saturate( <number-percentage> )',
									'scale()': 'scale( [<number>|<percentage>]#{1,2} )',
									'scale3d()': 'scale3d( [<number>|<percentage>]#{3} )',
									'scaleX()': 'scaleX( [<number>|<percentage>] )',
									'scaleY()': 'scaleY( [<number>|<percentage>] )',
									'scaleZ()': 'scaleZ( [<number>|<percentage>] )',
									scroller: 'root|nearest',
									'self-position':
										'center|start|end|self-start|self-end|flex-start|flex-end',
									'shape-radius': '<length-percentage>|closest-side|farthest-side',
									'sign()': 'sign( <calc-sum> )',
									'skew()': 'skew( [<angle>|<zero>] , [<angle>|<zero>]? )',
									'skewX()': 'skewX( [<angle>|<zero>] )',
									'skewY()': 'skewY( [<angle>|<zero>] )',
									'sepia()': 'sepia( <number-percentage> )',
									shadow: 'inset?&&<length>{2,4}&&<color>?',
									'shadow-t': '[<length>{2,3}&&<color>?]',
									shape:
										'rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )',
									'shape-box': '<box>|margin-box',
									'side-or-corner': '[left|right]||[top|bottom]',
									'sin()': 'sin( <calc-sum> )',
									'single-animation':
										'<time>||<easing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]',
									'single-animation-direction':
										'normal|reverse|alternate|alternate-reverse',
									'single-animation-fill-mode': 'none|forwards|backwards|both',
									'single-animation-iteration-count': 'infinite|<number>',
									'single-animation-play-state': 'running|paused',
									'single-animation-timeline':
										'auto|none|<timeline-name>|scroll( <axis>? <scroller>? )',
									'single-transition':
										'[none|<single-transition-property>]||<time>||<easing-function>||<time>',
									'single-transition-property': 'all|<custom-ident>',
									size:
										'closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}',
									'sqrt()': 'sqrt( <calc-sum> )',
									'step-position': 'jump-start|jump-end|jump-none|jump-both|start|end',
									'step-timing-function':
										'step-start|step-end|steps( <integer> [, <step-position>]? )',
									'subclass-selector':
										'<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>',
									'supports-condition':
										'not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*',
									'supports-in-parens':
										'( <supports-condition> )|<supports-feature>|<general-enclosed>',
									'supports-feature': '<supports-decl>|<supports-selector-fn>',
									'supports-decl': '( <declaration> )',
									'supports-selector-fn': 'selector( <complex-selector> )',
									symbol: '<string>|<image>|<custom-ident>',
									'tan()': 'tan( <calc-sum> )',
									target: '<target-counter()>|<target-counters()>|<target-text()>',
									'target-counter()':
										'target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )',
									'target-counters()':
										'target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )',
									'target-text()':
										'target-text( [<string>|<url>] , [content|before|after|first-letter]? )',
									'time-percentage': '<time>|<percentage>',
									'timeline-name': '<custom-ident>|<string>',
									'easing-function':
										'linear|<cubic-bezier-timing-function>|<step-timing-function>',
									'track-breadth':
										'<length-percentage>|<flex>|min-content|max-content|auto',
									'track-list':
										'[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?',
									'track-repeat':
										'repeat( [<integer [1,∞]>] , [<line-names>? <track-size>]+ <line-names>? )',
									'track-size':
										'<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( <length-percentage> )',
									'transform-function':
										'<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>',
									'transform-list': '<transform-function>+',
									'translate()':
										'translate( <length-percentage> , <length-percentage>? )',
									'translate3d()':
										'translate3d( <length-percentage> , <length-percentage> , <length> )',
									'translateX()': 'translateX( <length-percentage> )',
									'translateY()': 'translateY( <length-percentage> )',
									'translateZ()': 'translateZ( <length> )',
									'type-or-unit':
										'string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%',
									'type-selector': "<wq-name>|<ns-prefix>? '*'",
									'var()': 'var( <custom-property-name> , <declaration-value>? )',
									'viewport-length': 'auto|<length-percentage>',
									'visual-box': 'content-box|padding-box|border-box',
									'wq-name': '<ns-prefix>? <ident-token>',
									'-legacy-gradient':
										'<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>',
									'-legacy-linear-gradient':
										'-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )',
									'-legacy-repeating-linear-gradient':
										'-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )',
									'-legacy-linear-gradient-arguments':
										'[<angle>|<side-or-corner>]? , <color-stop-list>',
									'-legacy-radial-gradient':
										'-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )',
									'-legacy-repeating-radial-gradient':
										'-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )',
									'-legacy-radial-gradient-arguments':
										'[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>',
									'-legacy-radial-gradient-size':
										'closest-side|closest-corner|farthest-side|farthest-corner|contain|cover',
									'-legacy-radial-gradient-shape': 'circle|ellipse',
									'-non-standard-font':
										'-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body',
									'-non-standard-color':
										'-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text',
									'-non-standard-image-rendering':
										'optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast',
									'-non-standard-overflow':
										'-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable',
									'-non-standard-width':
										'fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content',
									'-webkit-gradient()':
										'-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )',
									'-webkit-gradient-color-stop':
										'from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )',
									'-webkit-gradient-point':
										'[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]',
									'-webkit-gradient-radius': '<length>|<percentage>',
									'-webkit-gradient-type': 'linear|radial',
									'-webkit-mask-box-repeat': 'repeat|stretch|round',
									'-webkit-mask-clip-style':
										'border|border-box|padding|padding-box|content|content-box|text',
									'-ms-filter-function-list': '<-ms-filter-function>+',
									'-ms-filter-function':
										'<-ms-filter-function-progid>|<-ms-filter-function-legacy>',
									'-ms-filter-function-progid':
										"'progid:' [<ident-token> '.']* [<ident-token>|<function-token> <any-value>? )]",
									'-ms-filter-function-legacy':
										'<ident-token>|<function-token> <any-value>? )',
									'-ms-filter': '<string>',
									age: 'child|young|old',
									'attr-name': '<wq-name>',
									'attr-fallback': '<any-value>',
									'bg-clip': '<box>|border|text',
									bottom: '<length>|auto',
									'generic-voice': '[<age>? <gender> <integer>?]',
									gender: 'male|female|neutral',
									left: '<length>|auto',
									'mask-image': '<mask-reference>#',
									paint:
										'none|<color>|<url> [none|<color>]?|context-fill|context-stroke',
									right: '<length>|auto',
									'scroll-timeline-axis': 'block|inline|vertical|horizontal',
									'scroll-timeline-name': 'none|<custom-ident>',
									'single-animation-composition': 'replace|add|accumulate',
									'svg-length': '<percentage>|<length>|<number>',
									'svg-writing-mode': 'lr-tb|rl-tb|tb-rl|lr|rl|tb',
									top: '<length>|auto',
									x: '<number>',
									y: '<number>',
									declaration: "<ident-token> : <declaration-value>? ['!' important]?",
									'declaration-list': "[<declaration>? ';']* <declaration>?",
									url: 'url( <string> <url-modifier>* )|<url-token>',
									'url-modifier': '<ident>|<function-token> <any-value> )',
									'number-zero-one': '<number [0,1]>',
									'number-one-or-greater': '<number [1,∞]>',
									'-non-standard-display':
										'-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box',
								},
								properties: {
									'--*': '<declaration-value>',
									'-ms-accelerator': 'false|true',
									'-ms-block-progression': 'tb|rl|bt|lr',
									'-ms-content-zoom-chaining': 'none|chained',
									'-ms-content-zooming': 'none|zoom',
									'-ms-content-zoom-limit':
										"<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
									'-ms-content-zoom-limit-max': '<percentage>',
									'-ms-content-zoom-limit-min': '<percentage>',
									'-ms-content-zoom-snap':
										"<'-ms-content-zoom-snap-type'>||<'-ms-content-zoom-snap-points'>",
									'-ms-content-zoom-snap-points':
										'snapInterval( <percentage> , <percentage> )|snapList( <percentage># )',
									'-ms-content-zoom-snap-type': 'none|proximity|mandatory',
									'-ms-filter': '<string>',
									'-ms-flow-from': '[none|<custom-ident>]#',
									'-ms-flow-into': '[none|<custom-ident>]#',
									'-ms-grid-columns': 'none|<track-list>|<auto-track-list>',
									'-ms-grid-rows': 'none|<track-list>|<auto-track-list>',
									'-ms-high-contrast-adjust': 'auto|none',
									'-ms-hyphenate-limit-chars': 'auto|<integer>{1,3}',
									'-ms-hyphenate-limit-lines': 'no-limit|<integer>',
									'-ms-hyphenate-limit-zone': '<percentage>|<length>',
									'-ms-ime-align': 'auto|after',
									'-ms-overflow-style': 'auto|none|scrollbar|-ms-autohiding-scrollbar',
									'-ms-scrollbar-3dlight-color': '<color>',
									'-ms-scrollbar-arrow-color': '<color>',
									'-ms-scrollbar-base-color': '<color>',
									'-ms-scrollbar-darkshadow-color': '<color>',
									'-ms-scrollbar-face-color': '<color>',
									'-ms-scrollbar-highlight-color': '<color>',
									'-ms-scrollbar-shadow-color': '<color>',
									'-ms-scrollbar-track-color': '<color>',
									'-ms-scroll-chaining': 'chained|none',
									'-ms-scroll-limit':
										"<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
									'-ms-scroll-limit-x-max': 'auto|<length>',
									'-ms-scroll-limit-x-min': '<length>',
									'-ms-scroll-limit-y-max': 'auto|<length>',
									'-ms-scroll-limit-y-min': '<length>',
									'-ms-scroll-rails': 'none|railed',
									'-ms-scroll-snap-points-x':
										'snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )',
									'-ms-scroll-snap-points-y':
										'snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )',
									'-ms-scroll-snap-type': 'none|proximity|mandatory',
									'-ms-scroll-snap-x':
										"<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
									'-ms-scroll-snap-y':
										"<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
									'-ms-scroll-translation': 'none|vertical-to-horizontal',
									'-ms-text-autospace':
										'none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space',
									'-ms-touch-select': 'grippers|none',
									'-ms-user-select': 'none|element|text',
									'-ms-wrap-flow': 'auto|both|start|end|maximum|clear',
									'-ms-wrap-margin': '<length>',
									'-ms-wrap-through': 'wrap|none',
									'-moz-appearance':
										'none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized',
									'-moz-binding': '<url>|none',
									'-moz-border-bottom-colors': '<color>+|none',
									'-moz-border-left-colors': '<color>+|none',
									'-moz-border-right-colors': '<color>+|none',
									'-moz-border-top-colors': '<color>+|none',
									'-moz-context-properties':
										'none|[fill|fill-opacity|stroke|stroke-opacity]#',
									'-moz-float-edge': 'border-box|content-box|margin-box|padding-box',
									'-moz-force-broken-image-icon': '0|1',
									'-moz-image-region': '<shape>|auto',
									'-moz-orient': 'inline|block|horizontal|vertical',
									'-moz-outline-radius':
										'<outline-radius>{1,4} [/ <outline-radius>{1,4}]?',
									'-moz-outline-radius-bottomleft': '<outline-radius>',
									'-moz-outline-radius-bottomright': '<outline-radius>',
									'-moz-outline-radius-topleft': '<outline-radius>',
									'-moz-outline-radius-topright': '<outline-radius>',
									'-moz-stack-sizing': 'ignore|stretch-to-fit',
									'-moz-text-blink': 'none|blink',
									'-moz-user-focus':
										'ignore|normal|select-after|select-before|select-menu|select-same|select-all|none',
									'-moz-user-input': 'auto|none|enabled|disabled',
									'-moz-user-modify': 'read-only|read-write|write-only',
									'-moz-window-dragging': 'drag|no-drag',
									'-moz-window-shadow': 'default|menu|tooltip|sheet|none',
									'-webkit-appearance':
										'none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button',
									'-webkit-border-before': "<'border-width'>||<'border-style'>||<color>",
									'-webkit-border-before-color': '<color>',
									'-webkit-border-before-style': "<'border-style'>",
									'-webkit-border-before-width': "<'border-width'>",
									'-webkit-box-reflect': '[above|below|right|left]? <length>? <image>?',
									'-webkit-line-clamp': 'none|<integer>',
									'-webkit-mask':
										'[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#',
									'-webkit-mask-attachment': '<attachment>#',
									'-webkit-mask-clip': '[<box>|border|padding|content|text]#',
									'-webkit-mask-composite': '<composite-style>#',
									'-webkit-mask-image': '<mask-reference>#',
									'-webkit-mask-origin': '[<box>|border|padding|content]#',
									'-webkit-mask-position': '<position>#',
									'-webkit-mask-position-x': '[<length-percentage>|left|center|right]#',
									'-webkit-mask-position-y': '[<length-percentage>|top|center|bottom]#',
									'-webkit-mask-repeat': '<repeat-style>#',
									'-webkit-mask-repeat-x': 'repeat|no-repeat|space|round',
									'-webkit-mask-repeat-y': 'repeat|no-repeat|space|round',
									'-webkit-mask-size': '<bg-size>#',
									'-webkit-overflow-scrolling': 'auto|touch',
									'-webkit-tap-highlight-color': '<color>',
									'-webkit-text-fill-color': '<color>',
									'-webkit-text-stroke': '<length>||<color>',
									'-webkit-text-stroke-color': '<color>',
									'-webkit-text-stroke-width': '<length>',
									'-webkit-touch-callout': 'default|none',
									'-webkit-user-modify':
										'read-only|read-write|read-write-plaintext-only',
									'accent-color': 'auto|<color>',
									'align-content':
										'normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>',
									'align-items':
										'normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]',
									'align-self':
										'auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>',
									'align-tracks':
										'[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#',
									all: 'initial|inherit|unset|revert|revert-layer',
									animation: '<single-animation>#',
									'animation-composition': '<single-animation-composition>#',
									'animation-delay': '<time>#',
									'animation-direction': '<single-animation-direction>#',
									'animation-duration': '<time>#',
									'animation-fill-mode': '<single-animation-fill-mode>#',
									'animation-iteration-count': '<single-animation-iteration-count>#',
									'animation-name': '[none|<keyframes-name>]#',
									'animation-play-state': '<single-animation-play-state>#',
									'animation-timing-function': '<easing-function>#',
									'animation-timeline': '<single-animation-timeline>#',
									appearance: 'none|auto|textfield|menulist-button|<compat-auto>',
									'aspect-ratio': 'auto|<ratio>',
									azimuth:
										'<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards',
									'backdrop-filter': 'none|<filter-function-list>',
									'backface-visibility': 'visible|hidden',
									background: '[<bg-layer> ,]* <final-bg-layer>',
									'background-attachment': '<attachment>#',
									'background-blend-mode': '<blend-mode>#',
									'background-clip': '<bg-clip>#',
									'background-color': '<color>',
									'background-image': '<bg-image>#',
									'background-origin': '<box>#',
									'background-position': '<bg-position>#',
									'background-position-x':
										'[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#',
									'background-position-y':
										'[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#',
									'background-repeat': '<repeat-style>#',
									'background-size': '<bg-size>#',
									'block-overflow': 'clip|ellipsis|<string>',
									'block-size': "<'width'>",
									border: '<line-width>||<line-style>||<color>',
									'border-block': "<'border-top-width'>||<'border-top-style'>||<color>",
									'border-block-color': "<'border-top-color'>{1,2}",
									'border-block-style': "<'border-top-style'>",
									'border-block-width': "<'border-top-width'>",
									'border-block-end':
										"<'border-top-width'>||<'border-top-style'>||<color>",
									'border-block-end-color': "<'border-top-color'>",
									'border-block-end-style': "<'border-top-style'>",
									'border-block-end-width': "<'border-top-width'>",
									'border-block-start':
										"<'border-top-width'>||<'border-top-style'>||<color>",
									'border-block-start-color': "<'border-top-color'>",
									'border-block-start-style': "<'border-top-style'>",
									'border-block-start-width': "<'border-top-width'>",
									'border-bottom': '<line-width>||<line-style>||<color>',
									'border-bottom-color': "<'border-top-color'>",
									'border-bottom-left-radius': '<length-percentage>{1,2}',
									'border-bottom-right-radius': '<length-percentage>{1,2}',
									'border-bottom-style': '<line-style>',
									'border-bottom-width': '<line-width>',
									'border-collapse': 'collapse|separate',
									'border-color': '<color>{1,4}',
									'border-end-end-radius': '<length-percentage>{1,2}',
									'border-end-start-radius': '<length-percentage>{1,2}',
									'border-image':
										"<'border-image-source'>||<'border-image-slice'> [/ <'border-image-width'>|/ <'border-image-width'>? / <'border-image-outset'>]?||<'border-image-repeat'>",
									'border-image-outset': '[<length>|<number>]{1,4}',
									'border-image-repeat': '[stretch|repeat|round|space]{1,2}',
									'border-image-slice': '<number-percentage>{1,4}&&fill?',
									'border-image-source': 'none|<image>',
									'border-image-width': '[<length-percentage>|<number>|auto]{1,4}',
									'border-inline': "<'border-top-width'>||<'border-top-style'>||<color>",
									'border-inline-end':
										"<'border-top-width'>||<'border-top-style'>||<color>",
									'border-inline-color': "<'border-top-color'>{1,2}",
									'border-inline-style': "<'border-top-style'>",
									'border-inline-width': "<'border-top-width'>",
									'border-inline-end-color': "<'border-top-color'>",
									'border-inline-end-style': "<'border-top-style'>",
									'border-inline-end-width': "<'border-top-width'>",
									'border-inline-start':
										"<'border-top-width'>||<'border-top-style'>||<color>",
									'border-inline-start-color': "<'border-top-color'>",
									'border-inline-start-style': "<'border-top-style'>",
									'border-inline-start-width': "<'border-top-width'>",
									'border-left': '<line-width>||<line-style>||<color>',
									'border-left-color': '<color>',
									'border-left-style': '<line-style>',
									'border-left-width': '<line-width>',
									'border-radius':
										'<length-percentage>{1,4} [/ <length-percentage>{1,4}]?',
									'border-right': '<line-width>||<line-style>||<color>',
									'border-right-color': '<color>',
									'border-right-style': '<line-style>',
									'border-right-width': '<line-width>',
									'border-spacing': '<length> <length>?',
									'border-start-end-radius': '<length-percentage>{1,2}',
									'border-start-start-radius': '<length-percentage>{1,2}',
									'border-style': '<line-style>{1,4}',
									'border-top': '<line-width>||<line-style>||<color>',
									'border-top-color': '<color>',
									'border-top-left-radius': '<length-percentage>{1,2}',
									'border-top-right-radius': '<length-percentage>{1,2}',
									'border-top-style': '<line-style>',
									'border-top-width': '<line-width>',
									'border-width': '<line-width>{1,4}',
									bottom: '<length>|<percentage>|auto',
									'box-align': 'start|center|end|baseline|stretch',
									'box-decoration-break': 'slice|clone',
									'box-direction': 'normal|reverse|inherit',
									'box-flex': '<number>',
									'box-flex-group': '<integer>',
									'box-lines': 'single|multiple',
									'box-ordinal-group': '<integer>',
									'box-orient': 'horizontal|vertical|inline-axis|block-axis|inherit',
									'box-pack': 'start|center|end|justify',
									'box-shadow': 'none|<shadow>#',
									'box-sizing': 'content-box|border-box',
									'break-after':
										'auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region',
									'break-before':
										'auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region',
									'break-inside': 'auto|avoid|avoid-page|avoid-column|avoid-region',
									'caption-side':
										'top|bottom|block-start|block-end|inline-start|inline-end',
									caret: "<'caret-color'>||<'caret-shape'>",
									'caret-color': 'auto|<color>',
									'caret-shape': 'auto|bar|block|underscore',
									clear: 'none|left|right|both|inline-start|inline-end',
									clip: '<shape>|auto',
									'clip-path': '<clip-source>|[<basic-shape>||<geometry-box>]|none',
									color: '<color>',
									'print-color-adjust': 'economy|exact',
									'color-scheme': 'normal|[light|dark|<custom-ident>]+&&only?',
									'column-count': '<integer>|auto',
									'column-fill': 'auto|balance|balance-all',
									'column-gap': 'normal|<length-percentage>',
									'column-rule':
										"<'column-rule-width'>||<'column-rule-style'>||<'column-rule-color'>",
									'column-rule-color': '<color>',
									'column-rule-style': "<'border-style'>",
									'column-rule-width': "<'border-width'>",
									'column-span': 'none|all',
									'column-width': '<length>|auto',
									columns: "<'column-width'>||<'column-count'>",
									contain:
										'none|strict|content|[[size||inline-size]||layout||style||paint]',
									'contain-intrinsic-size': '[none|<length>|auto <length>]{1,2}',
									'contain-intrinsic-block-size': 'none|<length>|auto <length>',
									'contain-intrinsic-height': 'none|<length>|auto <length>',
									'contain-intrinsic-inline-size': 'none|<length>|auto <length>',
									'contain-intrinsic-width': 'none|<length>|auto <length>',
									content:
										'normal|none|[<content-replacement>|<content-list>] [/ [<string>|<counter>]+]?',
									'content-visibility': 'visible|auto|hidden',
									'counter-increment': '[<counter-name> <integer>?]+|none',
									'counter-reset':
										'[<counter-name> <integer>?|<reversed-counter-name> <integer>?]+|none',
									'counter-set': '[<counter-name> <integer>?]+|none',
									cursor:
										'[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]',
									direction: 'ltr|rtl',
									display:
										'[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>',
									'empty-cells': 'show|hide',
									filter: 'none|<filter-function-list>|<-ms-filter-function-list>',
									flex: "none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]",
									'flex-basis': "content|<'width'>",
									'flex-direction': 'row|row-reverse|column|column-reverse',
									'flex-flow': "<'flex-direction'>||<'flex-wrap'>",
									'flex-grow': '<number>',
									'flex-shrink': '<number>',
									'flex-wrap': 'nowrap|wrap|wrap-reverse',
									float: 'left|right|none|inline-start|inline-end',
									font:
										"[[<'font-style'>||<font-variant-css21>||<'font-weight'>||<'font-stretch'>]? <'font-size'> [/ <'line-height'>]? <'font-family'>]|caption|icon|menu|message-box|small-caption|status-bar",
									'font-family': '[<family-name>|<generic-family>]#',
									'font-feature-settings': 'normal|<feature-tag-value>#',
									'font-kerning': 'auto|normal|none',
									'font-language-override': 'normal|<string>',
									'font-optical-sizing': 'auto|none',
									'font-variation-settings': 'normal|[<string> <number>]#',
									'font-size': '<absolute-size>|<relative-size>|<length-percentage>',
									'font-size-adjust':
										'none|[ex-height|cap-height|ch-width|ic-width|ic-height]? [from-font|<number>]',
									'font-smooth': 'auto|never|always|<absolute-size>|<length>',
									'font-stretch': '<font-stretch-absolute>',
									'font-style': 'normal|italic|oblique <angle>?',
									'font-synthesis': 'none|[weight||style||small-caps]',
									'font-variant':
										'normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]',
									'font-variant-alternates':
										'normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]',
									'font-variant-caps':
										'normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps',
									'font-variant-east-asian':
										'normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]',
									'font-variant-ligatures':
										'normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]',
									'font-variant-numeric':
										'normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]',
									'font-variant-position': 'normal|sub|super',
									'font-weight': '<font-weight-absolute>|bolder|lighter',
									'forced-color-adjust': 'auto|none',
									gap: "<'row-gap'> <'column-gap'>?",
									grid:
										"<'grid-template'>|<'grid-template-rows'> / [auto-flow&&dense?] <'grid-auto-columns'>?|[auto-flow&&dense?] <'grid-auto-rows'>? / <'grid-template-columns'>",
									'grid-area': '<grid-line> [/ <grid-line>]{0,3}',
									'grid-auto-columns': '<track-size>+',
									'grid-auto-flow': '[row|column]||dense',
									'grid-auto-rows': '<track-size>+',
									'grid-column': '<grid-line> [/ <grid-line>]?',
									'grid-column-end': '<grid-line>',
									'grid-column-gap': '<length-percentage>',
									'grid-column-start': '<grid-line>',
									'grid-gap': "<'grid-row-gap'> <'grid-column-gap'>?",
									'grid-row': '<grid-line> [/ <grid-line>]?',
									'grid-row-end': '<grid-line>',
									'grid-row-gap': '<length-percentage>',
									'grid-row-start': '<grid-line>',
									'grid-template':
										"none|[<'grid-template-rows'> / <'grid-template-columns'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?",
									'grid-template-areas': 'none|<string>+',
									'grid-template-columns':
										'none|<track-list>|<auto-track-list>|subgrid <line-name-list>?',
									'grid-template-rows':
										'none|<track-list>|<auto-track-list>|subgrid <line-name-list>?',
									'hanging-punctuation': 'none|[first||[force-end|allow-end]||last]',
									height:
										'auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )',
									'hyphenate-character': 'auto|<string>',
									hyphens: 'none|manual|auto',
									'image-orientation': 'from-image|<angle>|[<angle>? flip]',
									'image-rendering':
										'auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>',
									'image-resolution': '[from-image||<resolution>]&&snap?',
									'ime-mode': 'auto|normal|active|inactive|disabled',
									'initial-letter': 'normal|[<number> <integer>?]',
									'initial-letter-align': '[auto|alphabetic|hanging|ideographic]',
									'inline-size': "<'width'>",
									'input-security': 'auto|none',
									inset: "<'top'>{1,4}",
									'inset-block': "<'top'>{1,2}",
									'inset-block-end': "<'top'>",
									'inset-block-start': "<'top'>",
									'inset-inline': "<'top'>{1,2}",
									'inset-inline-end': "<'top'>",
									'inset-inline-start': "<'top'>",
									isolation: 'auto|isolate',
									'justify-content':
										'normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]',
									'justify-items':
										'normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]',
									'justify-self':
										'auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]',
									'justify-tracks':
										'[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#',
									left: '<length>|<percentage>|auto',
									'letter-spacing': 'normal|<length-percentage>',
									'line-break': 'auto|loose|normal|strict|anywhere',
									'line-clamp': 'none|<integer>',
									'line-height': 'normal|<number>|<length>|<percentage>',
									'line-height-step': '<length>',
									'list-style':
										"<'list-style-type'>||<'list-style-position'>||<'list-style-image'>",
									'list-style-image': '<image>|none',
									'list-style-position': 'inside|outside',
									'list-style-type': '<counter-style>|<string>|none',
									margin: '[<length>|<percentage>|auto]{1,4}',
									'margin-block': "<'margin-left'>{1,2}",
									'margin-block-end': "<'margin-left'>",
									'margin-block-start': "<'margin-left'>",
									'margin-bottom': '<length>|<percentage>|auto',
									'margin-inline': "<'margin-left'>{1,2}",
									'margin-inline-end': "<'margin-left'>",
									'margin-inline-start': "<'margin-left'>",
									'margin-left': '<length>|<percentage>|auto',
									'margin-right': '<length>|<percentage>|auto',
									'margin-top': '<length>|<percentage>|auto',
									'margin-trim': 'none|in-flow|all',
									mask: '<mask-layer>#',
									'mask-border':
										"<'mask-border-source'>||<'mask-border-slice'> [/ <'mask-border-width'>? [/ <'mask-border-outset'>]?]?||<'mask-border-repeat'>||<'mask-border-mode'>",
									'mask-border-mode': 'luminance|alpha',
									'mask-border-outset': '[<length>|<number>]{1,4}',
									'mask-border-repeat': '[stretch|repeat|round|space]{1,2}',
									'mask-border-slice': '<number-percentage>{1,4} fill?',
									'mask-border-source': 'none|<image>',
									'mask-border-width': '[<length-percentage>|<number>|auto]{1,4}',
									'mask-clip': '[<geometry-box>|no-clip]#',
									'mask-composite': '<compositing-operator>#',
									'mask-image': '<mask-reference>#',
									'mask-mode': '<masking-mode>#',
									'mask-origin': '<geometry-box>#',
									'mask-position': '<position>#',
									'mask-repeat': '<repeat-style>#',
									'mask-size': '<bg-size>#',
									'mask-type': 'luminance|alpha',
									'masonry-auto-flow': '[pack|next]||[definite-first|ordered]',
									'math-depth': 'auto-add|add( <integer> )|<integer>',
									'math-shift': 'normal|compact',
									'math-style': 'normal|compact',
									'max-block-size': "<'max-width'>",
									'max-height':
										'none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )',
									'max-inline-size': "<'max-width'>",
									'max-lines': 'none|<integer>',
									'max-width':
										'none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>',
									'min-block-size': "<'min-width'>",
									'min-height':
										'auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )',
									'min-inline-size': "<'min-width'>",
									'min-width':
										'auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>',
									'mix-blend-mode': '<blend-mode>|plus-lighter',
									'object-fit': 'fill|contain|cover|none|scale-down',
									'object-position': '<position>',
									offset:
										"[<'offset-position'>? [<'offset-path'> [<'offset-distance'>||<'offset-rotate'>]?]?]! [/ <'offset-anchor'>]?",
									'offset-anchor': 'auto|<position>',
									'offset-distance': '<length-percentage>',
									'offset-path':
										'none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]',
									'offset-position': 'auto|<position>',
									'offset-rotate': '[auto|reverse]||<angle>',
									opacity: '<alpha-value>',
									order: '<integer>',
									orphans: '<integer>',
									outline: "[<'outline-color'>||<'outline-style'>||<'outline-width'>]",
									'outline-color': '<color>|invert',
									'outline-offset': '<length>',
									'outline-style': "auto|<'border-style'>",
									'outline-width': '<line-width>',
									overflow:
										'[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>',
									'overflow-anchor': 'auto|none',
									'overflow-block': 'visible|hidden|clip|scroll|auto',
									'overflow-clip-box': 'padding-box|content-box',
									'overflow-clip-margin': '<visual-box>||<length [0,∞]>',
									'overflow-inline': 'visible|hidden|clip|scroll|auto',
									'overflow-wrap': 'normal|break-word|anywhere',
									'overflow-x': 'visible|hidden|clip|scroll|auto',
									'overflow-y': 'visible|hidden|clip|scroll|auto',
									'overscroll-behavior': '[contain|none|auto]{1,2}',
									'overscroll-behavior-block': 'contain|none|auto',
									'overscroll-behavior-inline': 'contain|none|auto',
									'overscroll-behavior-x': 'contain|none|auto',
									'overscroll-behavior-y': 'contain|none|auto',
									padding: '[<length>|<percentage>]{1,4}',
									'padding-block': "<'padding-left'>{1,2}",
									'padding-block-end': "<'padding-left'>",
									'padding-block-start': "<'padding-left'>",
									'padding-bottom': '<length>|<percentage>',
									'padding-inline': "<'padding-left'>{1,2}",
									'padding-inline-end': "<'padding-left'>",
									'padding-inline-start': "<'padding-left'>",
									'padding-left': '<length>|<percentage>',
									'padding-right': '<length>|<percentage>',
									'padding-top': '<length>|<percentage>',
									'page-break-after': 'auto|always|avoid|left|right|recto|verso',
									'page-break-before': 'auto|always|avoid|left|right|recto|verso',
									'page-break-inside': 'auto|avoid',
									'paint-order': 'normal|[fill||stroke||markers]',
									perspective: 'none|<length>',
									'perspective-origin': '<position>',
									'place-content': "<'align-content'> <'justify-content'>?",
									'place-items': "<'align-items'> <'justify-items'>?",
									'place-self': "<'align-self'> <'justify-self'>?",
									'pointer-events':
										'auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit',
									position: 'static|relative|absolute|sticky|fixed|-webkit-sticky',
									quotes: 'none|auto|[<string> <string>]+',
									resize: 'none|both|horizontal|vertical|block|inline',
									right: '<length>|<percentage>|auto',
									rotate: 'none|<angle>|[x|y|z|<number>{3}]&&<angle>',
									'row-gap': 'normal|<length-percentage>',
									'ruby-align': 'start|center|space-between|space-around',
									'ruby-merge': 'separate|collapse|auto',
									'ruby-position': '[alternate||[over|under]]|inter-character',
									scale: 'none|<number>{1,3}',
									'scrollbar-color': 'auto|<color>{2}',
									'scrollbar-gutter': 'auto|stable&&both-edges?',
									'scrollbar-width': 'auto|thin|none',
									'scroll-behavior': 'auto|smooth',
									'scroll-margin': '<length>{1,4}',
									'scroll-margin-block': '<length>{1,2}',
									'scroll-margin-block-start': '<length>',
									'scroll-margin-block-end': '<length>',
									'scroll-margin-bottom': '<length>',
									'scroll-margin-inline': '<length>{1,2}',
									'scroll-margin-inline-start': '<length>',
									'scroll-margin-inline-end': '<length>',
									'scroll-margin-left': '<length>',
									'scroll-margin-right': '<length>',
									'scroll-margin-top': '<length>',
									'scroll-padding': '[auto|<length-percentage>]{1,4}',
									'scroll-padding-block': '[auto|<length-percentage>]{1,2}',
									'scroll-padding-block-start': 'auto|<length-percentage>',
									'scroll-padding-block-end': 'auto|<length-percentage>',
									'scroll-padding-bottom': 'auto|<length-percentage>',
									'scroll-padding-inline': '[auto|<length-percentage>]{1,2}',
									'scroll-padding-inline-start': 'auto|<length-percentage>',
									'scroll-padding-inline-end': 'auto|<length-percentage>',
									'scroll-padding-left': 'auto|<length-percentage>',
									'scroll-padding-right': 'auto|<length-percentage>',
									'scroll-padding-top': 'auto|<length-percentage>',
									'scroll-snap-align': '[none|start|end|center]{1,2}',
									'scroll-snap-coordinate': 'none|<position>#',
									'scroll-snap-destination': '<position>',
									'scroll-snap-points-x': 'none|repeat( <length-percentage> )',
									'scroll-snap-points-y': 'none|repeat( <length-percentage> )',
									'scroll-snap-stop': 'normal|always',
									'scroll-snap-type':
										'none|[x|y|block|inline|both] [mandatory|proximity]?',
									'scroll-snap-type-x': 'none|mandatory|proximity',
									'scroll-snap-type-y': 'none|mandatory|proximity',
									'scroll-timeline': '<scroll-timeline-name>||<scroll-timeline-axis>',
									'scroll-timeline-axis': 'block|inline|vertical|horizontal',
									'scroll-timeline-name': 'none|<custom-ident>',
									'shape-image-threshold': '<alpha-value>',
									'shape-margin': '<length-percentage>',
									'shape-outside': 'none|[<shape-box>||<basic-shape>]|<image>',
									'tab-size': '<integer>|<length>',
									'table-layout': 'auto|fixed',
									'text-align': 'start|end|left|right|center|justify|match-parent',
									'text-align-last': 'auto|start|end|left|right|center|justify',
									'text-combine-upright': 'none|all|[digits <integer>?]',
									'text-decoration':
										"<'text-decoration-line'>||<'text-decoration-style'>||<'text-decoration-color'>||<'text-decoration-thickness'>",
									'text-decoration-color': '<color>',
									'text-decoration-line':
										'none|[underline||overline||line-through||blink]|spelling-error|grammar-error',
									'text-decoration-skip':
										'none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]',
									'text-decoration-skip-ink': 'auto|all|none',
									'text-decoration-style': 'solid|double|dotted|dashed|wavy',
									'text-decoration-thickness': 'auto|from-font|<length>|<percentage>',
									'text-emphasis': "<'text-emphasis-style'>||<'text-emphasis-color'>",
									'text-emphasis-color': '<color>',
									'text-emphasis-position': '[over|under]&&[right|left]',
									'text-emphasis-style':
										'none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>',
									'text-indent': '<length-percentage>&&hanging?&&each-line?',
									'text-justify': 'auto|inter-character|inter-word|none',
									'text-orientation': 'mixed|upright|sideways',
									'text-overflow': '[clip|ellipsis|<string>]{1,2}',
									'text-rendering':
										'auto|optimizeSpeed|optimizeLegibility|geometricPrecision',
									'text-shadow': 'none|<shadow-t>#',
									'text-size-adjust': 'none|auto|<percentage>',
									'text-transform':
										'none|capitalize|uppercase|lowercase|full-width|full-size-kana',
									'text-underline-offset': 'auto|<length>|<percentage>',
									'text-underline-position': 'auto|from-font|[under||[left|right]]',
									top: '<length>|<percentage>|auto',
									'touch-action':
										'auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation',
									transform: 'none|<transform-list>',
									'transform-box': 'content-box|border-box|fill-box|stroke-box|view-box',
									'transform-origin':
										'[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?',
									'transform-style': 'flat|preserve-3d',
									transition: '<single-transition>#',
									'transition-delay': '<time>#',
									'transition-duration': '<time>#',
									'transition-property': 'none|<single-transition-property>#',
									'transition-timing-function': '<easing-function>#',
									translate: 'none|<length-percentage> [<length-percentage> <length>?]?',
									'unicode-bidi':
										'normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext',
									'user-select': 'auto|text|none|contain|all',
									'vertical-align':
										'baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>',
									visibility: 'visible|hidden|collapse',
									'white-space': 'normal|pre|nowrap|pre-wrap|pre-line|break-spaces',
									widows: '<integer>',
									width:
										'auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|fill|stretch|intrinsic|-moz-max-content|-webkit-max-content|-moz-fit-content|-webkit-fit-content',
									'will-change': 'auto|<animateable-feature>#',
									'word-break': 'normal|break-all|keep-all|break-word',
									'word-spacing': 'normal|<length>',
									'word-wrap': 'normal|break-word',
									'writing-mode':
										'horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>',
									'z-index': 'auto|<integer>',
									zoom: 'normal|reset|<number>|<percentage>',
									'-moz-background-clip': 'padding|border',
									'-moz-border-radius-bottomleft': "<'border-bottom-left-radius'>",
									'-moz-border-radius-bottomright': "<'border-bottom-right-radius'>",
									'-moz-border-radius-topleft': "<'border-top-left-radius'>",
									'-moz-border-radius-topright': "<'border-bottom-right-radius'>",
									'-moz-control-character-visibility': 'visible|hidden',
									'-moz-osx-font-smoothing': 'auto|grayscale',
									'-moz-user-select': 'none|text|all|-moz-none',
									'-ms-flex-align': 'start|end|center|baseline|stretch',
									'-ms-flex-item-align': 'auto|start|end|center|baseline|stretch',
									'-ms-flex-line-pack': 'start|end|center|justify|distribute|stretch',
									'-ms-flex-negative': "<'flex-shrink'>",
									'-ms-flex-pack': 'start|end|center|justify|distribute',
									'-ms-flex-order': '<integer>',
									'-ms-flex-positive': "<'flex-grow'>",
									'-ms-flex-preferred-size': "<'flex-basis'>",
									'-ms-interpolation-mode': 'nearest-neighbor|bicubic',
									'-ms-grid-column-align': 'start|end|center|stretch',
									'-ms-grid-row-align': 'start|end|center|stretch',
									'-ms-hyphenate-limit-last': 'none|always|column|page|spread',
									'-webkit-background-clip': '[<box>|border|padding|content|text]#',
									'-webkit-column-break-after': 'always|auto|avoid',
									'-webkit-column-break-before': 'always|auto|avoid',
									'-webkit-column-break-inside': 'always|auto|avoid',
									'-webkit-font-smoothing': 'auto|none|antialiased|subpixel-antialiased',
									'-webkit-mask-box-image':
										'[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?',
									'-webkit-print-color-adjust': 'economy|exact',
									'-webkit-text-security': 'none|circle|disc|square',
									'-webkit-user-drag': 'none|element|auto',
									'-webkit-user-select': 'auto|none|text|all',
									'alignment-baseline':
										'auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical',
									'baseline-shift': 'baseline|sub|super|<svg-length>',
									behavior: '<url>+',
									'clip-rule': 'nonzero|evenodd',
									cue: "<'cue-before'> <'cue-after'>?",
									'cue-after': '<url> <decibel>?|none',
									'cue-before': '<url> <decibel>?|none',
									'dominant-baseline':
										'auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge',
									fill: '<paint>',
									'fill-opacity': '<number-zero-one>',
									'fill-rule': 'nonzero|evenodd',
									'glyph-orientation-horizontal': '<angle>',
									'glyph-orientation-vertical': '<angle>',
									kerning: 'auto|<svg-length>',
									marker: 'none|<url>',
									'marker-end': 'none|<url>',
									'marker-mid': 'none|<url>',
									'marker-start': 'none|<url>',
									pause: "<'pause-before'> <'pause-after'>?",
									'pause-after': '<time>|none|x-weak|weak|medium|strong|x-strong',
									'pause-before': '<time>|none|x-weak|weak|medium|strong|x-strong',
									rest: "<'rest-before'> <'rest-after'>?",
									'rest-after': '<time>|none|x-weak|weak|medium|strong|x-strong',
									'rest-before': '<time>|none|x-weak|weak|medium|strong|x-strong',
									'shape-rendering': 'auto|optimizeSpeed|crispEdges|geometricPrecision',
									src: '[<url> [format( <string># )]?|local( <family-name> )]#',
									speak: 'auto|none|normal',
									'speak-as':
										'normal|spell-out||digits||[literal-punctuation|no-punctuation]',
									stroke: '<paint>',
									'stroke-dasharray': 'none|[<svg-length>+]#',
									'stroke-dashoffset': '<svg-length>',
									'stroke-linecap': 'butt|round|square',
									'stroke-linejoin': 'miter|round|bevel',
									'stroke-miterlimit': '<number-one-or-greater>',
									'stroke-opacity': '<number-zero-one>',
									'stroke-width': '<svg-length>',
									'text-anchor': 'start|middle|end',
									'unicode-range': '<urange>#',
									'voice-balance': '<number>|left|center|right|leftwards|rightwards',
									'voice-duration': 'auto|<time>',
									'voice-family':
										'[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve',
									'voice-pitch':
										'<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]',
									'voice-range':
										'<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]',
									'voice-rate': '[normal|x-slow|slow|medium|fast|x-fast]||<percentage>',
									'voice-stress': 'normal|strong|moderate|none|reduced',
									'voice-volume': 'silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]',
								},
								atrules: {
									charset: { prelude: '<string>', descriptors: null },
									'counter-style': {
										prelude: '<counter-style-name>',
										descriptors: {
											'additive-symbols': '[<integer>&&<symbol>]#',
											fallback: '<counter-style-name>',
											negative: '<symbol> <symbol>?',
											pad: '<integer>&&<symbol>',
											prefix: '<symbol>',
											range: '[[<integer>|infinite]{2}]#|auto',
											'speak-as':
												'auto|bullets|numbers|words|spell-out|<counter-style-name>',
											suffix: '<symbol>',
											symbols: '<symbol>+',
											system:
												'cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]',
										},
									},
									document: {
										prelude:
											'[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#',
										descriptors: null,
									},
									'font-face': {
										prelude: null,
										descriptors: {
											'ascent-override': 'normal|<percentage>',
											'descent-override': 'normal|<percentage>',
											'font-display': '[auto|block|swap|fallback|optional]',
											'font-family': '<family-name>',
											'font-feature-settings': 'normal|<feature-tag-value>#',
											'font-variation-settings': 'normal|[<string> <number>]#',
											'font-stretch': '<font-stretch-absolute>{1,2}',
											'font-style': 'normal|italic|oblique <angle>{0,2}',
											'font-weight': '<font-weight-absolute>{1,2}',
											'font-variant':
												'normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]',
											'line-gap-override': 'normal|<percentage>',
											'size-adjust': '<percentage>',
											src: '[<url> [format( <string># )]?|local( <family-name> )]#',
											'unicode-range': '<urange>#',
										},
									},
									'font-feature-values': {
										prelude: '<family-name>#',
										descriptors: null,
									},
									import: {
										prelude:
											'[<string>|<url>] [layer|layer( <layer-name> )]? [supports( [<supports-condition>|<declaration>] )]? <media-query-list>?',
										descriptors: null,
									},
									keyframes: { prelude: '<keyframes-name>', descriptors: null },
									layer: { prelude: '[<layer-name>#|<layer-name>?]', descriptors: null },
									media: { prelude: '<media-query-list>', descriptors: null },
									namespace: {
										prelude: '<namespace-prefix>? [<string>|<url>]',
										descriptors: null,
									},
									page: {
										prelude: '<page-selector-list>',
										descriptors: {
											bleed: 'auto|<length>',
											marks: 'none|[crop||cross]',
											size: '<length>{1,2}|auto|[<page-size>||[portrait|landscape]]',
										},
									},
									property: {
										prelude: '<custom-property-name>',
										descriptors: {
											syntax: '<string>',
											inherits: 'true|false',
											'initial-value': '<string>',
										},
									},
									'scroll-timeline': { prelude: '<timeline-name>', descriptors: null },
									supports: { prelude: '<supports-condition>', descriptors: null },
									viewport: {
										prelude: null,
										descriptors: {
											height: '<viewport-length>{1,2}',
											'max-height': '<viewport-length>',
											'max-width': '<viewport-length>',
											'max-zoom': 'auto|<number>|<percentage>',
											'min-height': '<viewport-length>',
											'min-width': '<viewport-length>',
											'min-zoom': 'auto|<number>|<percentage>',
											orientation: 'auto|portrait|landscape',
											'user-zoom': 'zoom|fixed',
											'viewport-fit': 'auto|contain|cover',
											width: '<viewport-length>{1,2}',
											zoom: 'auto|<number>|<percentage>',
										},
									},
									nest: { prelude: '<complex-selector-list>', descriptors: null },
								},
								node: G,
								parseContext: {
									default: 'StyleSheet',
									stylesheet: 'StyleSheet',
									atrule: 'Atrule',
									atrulePrelude(e) {
										return this.AtrulePrelude(e.atrule ? String(e.atrule) : null)
									},
									mediaQueryList: 'MediaQueryList',
									mediaQuery: 'MediaQuery',
									rule: 'Rule',
									selectorList: 'SelectorList',
									selector: 'Selector',
									block() {
										return this.Block(!0)
									},
									declarationList: 'DeclarationList',
									declaration: 'Declaration',
									value: 'Value',
								},
								scope: Q,
								atrule: {
									'font-face': {
										parse: {
											prelude: null,
											block() {
												return this.Block(!0)
											},
										},
									},
									import: {
										parse: {
											prelude() {
												const e = this.createList()
												switch ((this.skipSC(), this.tokenType)) {
													case J:
														e.push(this.String())
														break
													case te:
													case X:
														e.push(this.Url())
														break
													default:
														this.error('String or url() is expected')
												}
												return (
													(this.lookupNonWSType(0) !== $ &&
														this.lookupNonWSType(0) !== ge) ||
														e.push(this.MediaQueryList()),
													e
												)
											},
											block: null,
										},
									},
									media: {
										parse: {
											prelude() {
												return this.createSingleNodeList(this.MediaQueryList())
											},
											block(e = !1) {
												return this.Block(e)
											},
										},
									},
									nest: {
										parse: {
											prelude() {
												return this.createSingleNodeList(this.SelectorList())
											},
											block() {
												return this.Block(!0)
											},
										},
									},
									page: {
										parse: {
											prelude() {
												return this.createSingleNodeList(this.SelectorList())
											},
											block() {
												return this.Block(!0)
											},
										},
									},
									supports: {
										parse: {
											prelude() {
												const e = yc.call(this)
												return (
													null === this.getFirstListNode(e) &&
														this.error('Condition is expected'),
													e
												)
											},
											block(e = !1) {
												return this.Block(e)
											},
										},
									},
								},
								pseudo: {
									dir: xc,
									has: kc,
									lang: xc,
									matches: kc,
									is: kc,
									'-moz-any': kc,
									'-webkit-any': kc,
									where: kc,
									not: kc,
									'nth-child': wc,
									'nth-last-child': wc,
									'nth-last-of-type': wc,
									'nth-of-type': wc,
									slotted: vc,
									host: vc,
									'host-context': vc,
								},
								node: K,
								node: G,
							}
						)
					),
					{
						tokenize: Cc,
						parse: zc,
						generate: Ac,
						lexer: Lc,
						createLexer: Tc,
						walk: Oc,
						find: Pc,
						findLast: Ec,
						findAll: jc,
						toPlainObject: Dc,
						fromPlainObject: Ic,
						fork: Mc,
					} = Sc
				var Nc =
						'\n\t\t.div {\n\t\t\twidth: (width) px;\n\t\t\theight: 200px;\n\t\t\tbackground-color: gray;\n\t\t}\n',
					_c = function (e) {
						var t = zc(e),
							n = Ac(t)
						console.log(n)
					}
				_c(Nc)
			})(),
			r
		)
	})()
)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
